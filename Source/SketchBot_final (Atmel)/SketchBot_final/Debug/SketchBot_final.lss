
SketchBot_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000015a4  00001638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800204  00800204  0000163c  2**0
                  ALLOC
  3 .stab         00003078  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a73  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00005128  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec5  00000000  00000000  000051e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e1  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060a  00000000  00000000  0000638e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00006998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba5  00000000  00000000  000076e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
       4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      14:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_5>
      18:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_6>
      1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_25>
      68:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      70:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      74:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      7c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      80:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      84:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      88:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      8c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      90:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      94:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      98:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      9c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      ac:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      b0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      b4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      b8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      bc:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      c0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      c4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      c8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      cc:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      d0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      d4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      d8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      dc:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      e0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_start>:
     112:	8d 07       	cpc	r24, r29

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d1 e2       	ldi	r29, 0x21	; 33
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	e4 ea       	ldi	r30, 0xA4	; 164
     12c:	f5 e1       	ldi	r31, 0x15	; 21
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 30       	cpi	r26, 0x04	; 4
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a4 e0       	ldi	r26, 0x04	; 4
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a4 33       	cpi	r26, 0x34	; 52
     14a:	b1 07       	cpc	r27, r17
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>

0000014e <__do_global_ctors>:
     14e:	11 e0       	ldi	r17, 0x01	; 1
     150:	c4 e1       	ldi	r28, 0x14	; 20
     152:	d1 e0       	ldi	r29, 0x01	; 1
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	06 c0       	rjmp	.+12     	; 0x164 <__do_global_ctors+0x16>
     158:	22 97       	sbiw	r28, 0x02	; 2
     15a:	01 09       	sbc	r16, r1
     15c:	fe 01       	movw	r30, r28
     15e:	0b bf       	out	0x3b, r16	; 59
     160:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__tablejump_elpm__>
     164:	c2 31       	cpi	r28, 0x12	; 18
     166:	d1 07       	cpc	r29, r17
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 07       	cpc	r16, r24
     16c:	a9 f7       	brne	.-22     	; 0x158 <__do_global_ctors+0xa>
     16e:	0e 94 7c 07 	call	0xef8	; 0xef8 <main>
     172:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <_Z17motion_pin_configv>:
ï»¿
//**************************************************need to run motion_pin_config(), position_encoder_init()*******************

void motion_pin_config()
{
	DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     17a:	81 b1       	in	r24, 0x01	; 1
     17c:	8f 60       	ori	r24, 0x0F	; 15
     17e:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     180:	82 b1       	in	r24, 0x02	; 2
     182:	80 7f       	andi	r24, 0xF0	; 240
     184:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     186:	ea e0       	ldi	r30, 0x0A	; 10
     188:	f1 e0       	ldi	r31, 0x01	; 1
     18a:	80 81       	ld	r24, Z
     18c:	88 61       	ori	r24, 0x18	; 24
     18e:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     190:	eb e0       	ldi	r30, 0x0B	; 11
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	80 81       	ld	r24, Z
     196:	88 61       	ori	r24, 0x18	; 24
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <_Z10motion_seth>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
     19c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     19e:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     1a0:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     1a2:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
     1a4:	92 b9       	out	0x02, r25	; 2
}
     1a6:	08 95       	ret

000001a8 <_Z7forwardv>:

void forward() { motion_set(0x06); }		//both wheels forward
     1a8:	86 e0       	ldi	r24, 0x06	; 6
     1aa:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1ae:	08 95       	ret

000001b0 <_Z4backv>:
	
void back() { motion_set(0x09); }			//both wheels backward
     1b0:	89 e0       	ldi	r24, 0x09	; 9
     1b2:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1b6:	08 95       	ret

000001b8 <_Z4leftv>:

void left() { motion_set(0x05); }			//Left wheel backward, Right wheel forward
     1b8:	85 e0       	ldi	r24, 0x05	; 5
     1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1be:	08 95       	ret

000001c0 <_Z5rightv>:

void right() { motion_set(0x0A); }			//Left wheel forward, Right wheel backward
     1c0:	8a e0       	ldi	r24, 0x0A	; 10
     1c2:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1c6:	08 95       	ret

000001c8 <_Z9soft_leftv>:

void soft_left() { motion_set(0x04); }		//Left wheel stationary, Right wheel forward
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1ce:	08 95       	ret

000001d0 <_Z10soft_rightv>:

void soft_right() { motion_set(0x02); }		//Left wheel forward, Right wheel is stationary
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1d6:	08 95       	ret

000001d8 <_Z11soft_left_2v>:

void soft_left_2() { motion_set(0x01); }	//Left wheel backward, right wheel stationary
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1de:	08 95       	ret

000001e0 <_Z12soft_right_2v>:

void soft_right_2() { motion_set(0x08); }	//Left wheel stationary, Right wheel backward
     1e0:	88 e0       	ldi	r24, 0x08	; 8
     1e2:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1e6:	08 95       	ret

000001e8 <_Z4stopv>:

void stop() { motion_set(0x00); }			//hard stop
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z10motion_seth>
     1ee:	08 95       	ret

000001f0 <_Z11timer5_initv>:
	
	
//PWM	
void timer5_init()      //for velocity control
{
	TCCR5B=0x00;        //stop
     1f0:	e1 e2       	ldi	r30, 0x21	; 33
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	10 82       	st	Z, r1
	TCCR5A=0xA9;
     1f6:	89 ea       	ldi	r24, 0xA9	; 169
     1f8:	80 93 20 01 	sts	0x0120, r24
	TCNT5H=0xff;        //we only want to count upto 255 not till 65335
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	80 93 25 01 	sts	0x0125, r24
	TCNT5L=0x00;
     202:	10 92 24 01 	sts	0x0124, r1
	//OCR5AH=0xff;      //useless coz we have defined in TCCR that we will use 8bit mode so only OCR5AL is used
	OCR5AL=0x00;
     206:	10 92 28 01 	sts	0x0128, r1
	//OCR5BH=0xff;      //another useless fellow
	OCR5BL=0x00;
     20a:	10 92 2a 01 	sts	0x012A, r1
	TCCR5B=0x0B;
     20e:	8b e0       	ldi	r24, 0x0B	; 11
     210:	80 83       	st	Z, r24
}
     212:	08 95       	ret

00000214 <_Z8velocityhh>:

void velocity(unsigned char left_motor, unsigned char right_motor)         //sets the compare value for PWM (non-inverting mode)
{
	OCR5AL=left_motor;
     214:	80 93 28 01 	sts	0x0128, r24
	OCR5BL=right_motor;
     218:	60 93 2a 01 	sts	0x012A, r22
}
     21c:	08 95       	ret

0000021e <_Z23left_encoder_pin_configv>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config()
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     21e:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     220:	74 9a       	sbi	0x0e, 4	; 14
}
     222:	08 95       	ret

00000224 <_Z24right_encoder_pin_configv>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config()
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
     224:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 5 pin
     226:	75 9a       	sbi	0x0e, 5	; 14
}
     228:	08 95       	ret

0000022a <_Z36left_position_encoder_interrupt_initv>:

void left_position_encoder_interrupt_init() //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     22a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     22c:	ea e6       	ldi	r30, 0x6A	; 106
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	82 60       	ori	r24, 0x02	; 2
     234:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     236:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     238:	78 94       	sei
}
     23a:	08 95       	ret

0000023c <_Z37right_position_encoder_interrupt_initv>:

void right_position_encoder_interrupt_init() //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     23c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     23e:	ea e6       	ldi	r30, 0x6A	; 106
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	88 60       	ori	r24, 0x08	; 8
     246:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     248:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     24a:	78 94       	sei
}
     24c:	08 95       	ret

0000024e <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     260:	80 91 2c 02 	lds	r24, 0x022C
     264:	90 91 2d 02 	lds	r25, 0x022D
     268:	a0 91 2e 02 	lds	r26, 0x022E
     26c:	b0 91 2f 02 	lds	r27, 0x022F
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	a1 1d       	adc	r26, r1
     274:	b1 1d       	adc	r27, r1
     276:	80 93 2c 02 	sts	0x022C, r24
     27a:	90 93 2d 02 	sts	0x022D, r25
     27e:	a0 93 2e 02 	sts	0x022E, r26
     282:	b0 93 2f 02 	sts	0x022F, r27
}
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <__vector_5>:

//ISR for left position encoder
ISR(INT4_vect)
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     2aa:	80 91 30 02 	lds	r24, 0x0230
     2ae:	90 91 31 02 	lds	r25, 0x0231
     2b2:	a0 91 32 02 	lds	r26, 0x0232
     2b6:	b0 91 33 02 	lds	r27, 0x0233
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	a1 1d       	adc	r26, r1
     2be:	b1 1d       	adc	r27, r1
     2c0:	80 93 30 02 	sts	0x0230, r24
     2c4:	90 93 31 02 	sts	0x0231, r25
     2c8:	a0 93 32 02 	sts	0x0232, r26
     2cc:	b0 93 33 02 	sts	0x0233, r27
}
     2d0:	bf 91       	pop	r27
     2d2:	af 91       	pop	r26
     2d4:	9f 91       	pop	r25
     2d6:	8f 91       	pop	r24
     2d8:	0f 90       	pop	r0
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	0f 90       	pop	r0
     2de:	1f 90       	pop	r1
     2e0:	18 95       	reti

000002e2 <_Z21position_encoder_initv>:

void position_encoder_init()			//Initialize the position encoder
{
	left_encoder_pin_config();
     2e2:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z23left_encoder_pin_configv>
	right_encoder_pin_config();
     2e6:	0e 94 12 01 	call	0x224	; 0x224 <_Z24right_encoder_pin_configv>
	left_position_encoder_interrupt_init();
     2ea:	0e 94 15 01 	call	0x22a	; 0x22a <_Z36left_position_encoder_interrupt_initv>
	right_position_encoder_interrupt_init();
     2ee:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z37right_position_encoder_interrupt_initv>
}
     2f2:	08 95       	ret

000002f4 <_Z12angle_rotatej>:

const int rotation_resolution=4.090*5.44/5.338; //default 4.090 given
//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = float(Degrees)/ float(rotation_resolution); // division by resolution to get shaft count
     2fa:	bc 01       	movw	r22, r24
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatunsisf>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e8       	ldi	r20, 0x80	; 128
     30a:	5e e3       	ldi	r21, 0x3E	; 62
     30c:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     310:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     31c:	10 92 2c 02 	sts	0x022C, r1
     320:	10 92 2d 02 	sts	0x022D, r1
     324:	10 92 2e 02 	sts	0x022E, r1
     328:	10 92 2f 02 	sts	0x022F, r1
	ShaftCountLeft = 0;
     32c:	10 92 30 02 	sts	0x0230, r1
     330:	10 92 31 02 	sts	0x0231, r1
     334:	10 92 32 02 	sts	0x0232, r1
     338:	10 92 33 02 	sts	0x0233, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	c0 e0       	ldi	r28, 0x00	; 0
     340:	40 91 2c 02 	lds	r20, 0x022C
     344:	50 91 2d 02 	lds	r21, 0x022D
     348:	60 91 2e 02 	lds	r22, 0x022E
     34c:	70 91 2f 02 	lds	r23, 0x022F
     350:	00 91 30 02 	lds	r16, 0x0230
     354:	10 91 31 02 	lds	r17, 0x0231
     358:	20 91 32 02 	lds	r18, 0x0232
     35c:	30 91 33 02 	lds	r19, 0x0233
     360:	ef 2f       	mov	r30, r31
     362:	48 17       	cp	r20, r24
     364:	59 07       	cpc	r21, r25
     366:	6a 07       	cpc	r22, r26
     368:	7b 07       	cpc	r23, r27
     36a:	08 f4       	brcc	.+2      	; 0x36e <_Z12angle_rotatej+0x7a>
     36c:	ec 2f       	mov	r30, r28
     36e:	ee 23       	and	r30, r30
     370:	49 f4       	brne	.+18     	; 0x384 <_Z12angle_rotatej+0x90>
     372:	4f 2f       	mov	r20, r31
     374:	08 17       	cp	r16, r24
     376:	19 07       	cpc	r17, r25
     378:	2a 07       	cpc	r18, r26
     37a:	3b 07       	cpc	r19, r27
     37c:	08 f4       	brcc	.+2      	; 0x380 <_Z12angle_rotatej+0x8c>
     37e:	4c 2f       	mov	r20, r28
     380:	44 23       	and	r20, r20
     382:	f1 f2       	breq	.-68     	; 0x340 <_Z12angle_rotatej+0x4c>
		break;
	}
	stop(); //Stop robot
     384:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z4stopv>
}
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <_Z18linear_distance_mmj>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.44; // division by resolution to get shaft count
     390:	bc 01       	movw	r22, r24
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatunsisf>
     39a:	2b e7       	ldi	r18, 0x7B	; 123
     39c:	34 e1       	ldi	r19, 0x14	; 20
     39e:	4e ea       	ldi	r20, 0xAE	; 174
     3a0:	50 e4       	ldi	r21, 0x40	; 64
     3a2:	0e 94 99 08 	call	0x1132	; 0x1132 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     3a6:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     3aa:	46 2f       	mov	r20, r22
     3ac:	57 2f       	mov	r21, r23
     3ae:	68 2f       	mov	r22, r24
     3b0:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     3b2:	10 92 2c 02 	sts	0x022C, r1
     3b6:	10 92 2d 02 	sts	0x022D, r1
     3ba:	10 92 2e 02 	sts	0x022E, r1
     3be:	10 92 2f 02 	sts	0x022F, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     3c2:	80 91 2c 02 	lds	r24, 0x022C
     3c6:	90 91 2d 02 	lds	r25, 0x022D
     3ca:	a0 91 2e 02 	lds	r26, 0x022E
     3ce:	b0 91 2f 02 	lds	r27, 0x022F
     3d2:	48 17       	cp	r20, r24
     3d4:	59 07       	cpc	r21, r25
     3d6:	6a 07       	cpc	r22, r26
     3d8:	7b 07       	cpc	r23, r27
     3da:	98 f7       	brcc	.-26     	; 0x3c2 <_Z18linear_distance_mmj+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     3dc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z4stopv>
}
     3e0:	08 95       	ret

000003e2 <_Z10forward_mmj>:

void forward_mm(unsigned int DistanceInMM)
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
	forward();
     3e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z7forwardv>
	linear_distance_mm(DistanceInMM);
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 c8 01 	call	0x390	; 0x390 <_Z18linear_distance_mmj>
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <_Z7back_mmj>:

void back_mm(unsigned int DistanceInMM)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
	back();
     3fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z4backv>
	linear_distance_mm(DistanceInMM);
     402:	ce 01       	movw	r24, r28
     404:	0e 94 c8 01 	call	0x390	; 0x390 <_Z18linear_distance_mmj>
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <_Z12left_degreesj>:

void left_degrees(unsigned int Degrees)
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     414:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z4leftv>
	angle_rotate(Degrees);
     418:	ce 01       	movw	r24, r28
     41a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <_Z13right_degreesj>:

void right_degrees(unsigned int Degrees)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     42a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z5rightv>
	angle_rotate(Degrees);
     42e:	ce 01       	movw	r24, r28
     430:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <_Z17soft_left_degreesj>:

void soft_left_degrees(unsigned int Degrees)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     440:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z9soft_leftv>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     444:	ce 01       	movw	r24, r28
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <_Z18soft_right_degreesj>:

void soft_right_degrees(unsigned int Degrees)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     45a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z10soft_rightv>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     45e:	ce 01       	movw	r24, r28
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_Z19soft_left_2_degreesj>:

void soft_left_2_degrees(unsigned int Degrees)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
     474:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_Z11soft_left_2v>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     478:	ce 01       	movw	r24, r28
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <_Z20soft_right_2_degreesj>:

void soft_right_2_degrees(unsigned int Degrees)
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
     48e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z12soft_right_2v>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     492:	ce 01       	movw	r24, r28
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z12angle_rotatej>
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <_Z17calc_rotate_angle5PointS_f>:
	volatile float y;
};


float calc_rotate_angle(Point current_point, Point next_point, float current_angle)
{
     4a2:	4f 92       	push	r4
     4a4:	5f 92       	push	r5
     4a6:	6f 92       	push	r6
     4a8:	7f 92       	push	r7
     4aa:	8f 92       	push	r8
     4ac:	9f 92       	push	r9
     4ae:	af 92       	push	r10
     4b0:	bf 92       	push	r11
     4b2:	cf 92       	push	r12
     4b4:	df 92       	push	r13
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	60 97       	sbiw	r28, 0x10	; 16
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	29 83       	std	Y+1, r18	; 0x01
     4d4:	3a 83       	std	Y+2, r19	; 0x02
     4d6:	4b 83       	std	Y+3, r20	; 0x03
     4d8:	5c 83       	std	Y+4, r21	; 0x04
     4da:	6d 83       	std	Y+5, r22	; 0x05
     4dc:	7e 83       	std	Y+6, r23	; 0x06
     4de:	8f 83       	std	Y+7, r24	; 0x07
     4e0:	98 87       	std	Y+8, r25	; 0x08
     4e2:	a9 86       	std	Y+9, r10	; 0x09
     4e4:	ba 86       	std	Y+10, r11	; 0x0a
     4e6:	cb 86       	std	Y+11, r12	; 0x0b
     4e8:	dc 86       	std	Y+12, r13	; 0x0c
     4ea:	ed 86       	std	Y+13, r14	; 0x0d
     4ec:	fe 86       	std	Y+14, r15	; 0x0e
     4ee:	0f 87       	std	Y+15, r16	; 0x0f
     4f0:	18 8b       	std	Y+16, r17	; 0x10
	float x;
	if(next_point.x==current_point.x)
     4f2:	69 85       	ldd	r22, Y+9	; 0x09
     4f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     4f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4fa:	29 81       	ldd	r18, Y+1	; 0x01
     4fc:	3a 81       	ldd	r19, Y+2	; 0x02
     4fe:	4b 81       	ldd	r20, Y+3	; 0x03
     500:	5c 81       	ldd	r21, Y+4	; 0x04
     502:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     506:	88 23       	and	r24, r24
     508:	31 f5       	brne	.+76     	; 0x556 <_Z17calc_rotate_angle5PointS_f+0xb4>
	{
		if (next_point.y==current_point.y) return 0;
     50a:	6d 85       	ldd	r22, Y+13	; 0x0d
     50c:	7e 85       	ldd	r23, Y+14	; 0x0e
     50e:	8f 85       	ldd	r24, Y+15	; 0x0f
     510:	98 89       	ldd	r25, Y+16	; 0x10
     512:	2d 81       	ldd	r18, Y+5	; 0x05
     514:	3e 81       	ldd	r19, Y+6	; 0x06
     516:	4f 81       	ldd	r20, Y+7	; 0x07
     518:	58 85       	ldd	r21, Y+8	; 0x08
     51a:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     51e:	88 23       	and	r24, r24
     520:	09 f4       	brne	.+2      	; 0x524 <_Z17calc_rotate_angle5PointS_f+0x82>
     522:	ae c0       	rjmp	.+348    	; 0x680 <_Z17calc_rotate_angle5PointS_f+0x1de>
		else if(next_point.y>current_point.y) x=90;
     524:	6d 85       	ldd	r22, Y+13	; 0x0d
     526:	7e 85       	ldd	r23, Y+14	; 0x0e
     528:	8f 85       	ldd	r24, Y+15	; 0x0f
     52a:	98 89       	ldd	r25, Y+16	; 0x10
     52c:	2d 81       	ldd	r18, Y+5	; 0x05
     52e:	3e 81       	ldd	r19, Y+6	; 0x06
     530:	4f 81       	ldd	r20, Y+7	; 0x07
     532:	58 85       	ldd	r21, Y+8	; 0x08
     534:	0e 94 04 0a 	call	0x1408	; 0x1408 <__gesf2>
     538:	18 16       	cp	r1, r24
     53a:	f4 f1       	brlt	.+124    	; 0x5b8 <_Z17calc_rotate_angle5PointS_f+0x116>
		else if(next_point.y<current_point.y)x=-90;
     53c:	6d 85       	ldd	r22, Y+13	; 0x0d
     53e:	7e 85       	ldd	r23, Y+14	; 0x0e
     540:	8f 85       	ldd	r24, Y+15	; 0x0f
     542:	98 89       	ldd	r25, Y+16	; 0x10
     544:	2d 81       	ldd	r18, Y+5	; 0x05
     546:	3e 81       	ldd	r19, Y+6	; 0x06
     548:	4f 81       	ldd	r20, Y+7	; 0x07
     54a:	58 85       	ldd	r21, Y+8	; 0x08
     54c:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     550:	88 23       	and	r24, r24
     552:	ec f1       	brlt	.+122    	; 0x5ce <_Z17calc_rotate_angle5PointS_f+0x12c>
     554:	46 c0       	rjmp	.+140    	; 0x5e2 <_Z17calc_rotate_angle5PointS_f+0x140>
	}
	else x=atan2(next_point.y-current_point.y, next_point.x-current_point.x)*180/3.1416;
     556:	6d 85       	ldd	r22, Y+13	; 0x0d
     558:	7e 85       	ldd	r23, Y+14	; 0x0e
     55a:	8f 85       	ldd	r24, Y+15	; 0x0f
     55c:	98 89       	ldd	r25, Y+16	; 0x10
     55e:	2d 81       	ldd	r18, Y+5	; 0x05
     560:	3e 81       	ldd	r19, Y+6	; 0x06
     562:	4f 81       	ldd	r20, Y+7	; 0x07
     564:	58 85       	ldd	r21, Y+8	; 0x08
     566:	c9 84       	ldd	r12, Y+9	; 0x09
     568:	da 84       	ldd	r13, Y+10	; 0x0a
     56a:	eb 84       	ldd	r14, Y+11	; 0x0b
     56c:	fc 84       	ldd	r15, Y+12	; 0x0c
     56e:	49 80       	ldd	r4, Y+1	; 0x01
     570:	5a 80       	ldd	r5, Y+2	; 0x02
     572:	6b 80       	ldd	r6, Y+3	; 0x03
     574:	7c 80       	ldd	r7, Y+4	; 0x04
     576:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     57a:	4b 01       	movw	r8, r22
     57c:	5c 01       	movw	r10, r24
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	a3 01       	movw	r20, r6
     584:	92 01       	movw	r18, r4
     586:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     58a:	9b 01       	movw	r18, r22
     58c:	ac 01       	movw	r20, r24
     58e:	c5 01       	movw	r24, r10
     590:	b4 01       	movw	r22, r8
     592:	0e 94 42 08 	call	0x1084	; 0x1084 <atan2>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	44 e3       	ldi	r20, 0x34	; 52
     59c:	53 e4       	ldi	r21, 0x43	; 67
     59e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     5a2:	29 ef       	ldi	r18, 0xF9	; 249
     5a4:	3f e0       	ldi	r19, 0x0F	; 15
     5a6:	49 e4       	ldi	r20, 0x49	; 73
     5a8:	50 e4       	ldi	r21, 0x40	; 64
     5aa:	0e 94 99 08 	call	0x1132	; 0x1132 <__divsf3>
     5ae:	96 2e       	mov	r9, r22
     5b0:	87 2e       	mov	r8, r23
     5b2:	78 2e       	mov	r7, r24
     5b4:	69 2e       	mov	r6, r25
     5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <_Z17calc_rotate_angle5PointS_f+0x140>
{
	float x;
	if(next_point.x==current_point.x)
	{
		if (next_point.y==current_point.y) return 0;
		else if(next_point.y>current_point.y) x=90;
     5b8:	99 24       	eor	r9, r9
     5ba:	88 24       	eor	r8, r8
     5bc:	0f 2e       	mov	r0, r31
     5be:	f4 eb       	ldi	r31, 0xB4	; 180
     5c0:	7f 2e       	mov	r7, r31
     5c2:	f0 2d       	mov	r31, r0
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f2 e4       	ldi	r31, 0x42	; 66
     5c8:	6f 2e       	mov	r6, r31
     5ca:	f0 2d       	mov	r31, r0
     5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <_Z17calc_rotate_angle5PointS_f+0x140>
		else if(next_point.y<current_point.y)x=-90;
     5ce:	99 24       	eor	r9, r9
     5d0:	88 24       	eor	r8, r8
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f4 eb       	ldi	r31, 0xB4	; 180
     5d6:	7f 2e       	mov	r7, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	0f 2e       	mov	r0, r31
     5dc:	f2 ec       	ldi	r31, 0xC2	; 194
     5de:	6f 2e       	mov	r6, r31
     5e0:	f0 2d       	mov	r31, r0
	}
	else x=atan2(next_point.y-current_point.y, next_point.x-current_point.x)*180/3.1416;

	float angle_to_rotate = current_angle-x;
     5e2:	6c a1       	lds	r22, 0x4c
     5e4:	7d a1       	lds	r23, 0x4d
     5e6:	8e a1       	lds	r24, 0x4e
     5e8:	9f a1       	lds	r25, 0x4f
     5ea:	09 2d       	mov	r16, r9
     5ec:	18 2d       	mov	r17, r8
     5ee:	27 2d       	mov	r18, r7
     5f0:	36 2d       	mov	r19, r6
     5f2:	a9 01       	movw	r20, r18
     5f4:	98 01       	movw	r18, r16
     5f6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     5fa:	d6 2e       	mov	r13, r22
     5fc:	c7 2e       	mov	r12, r23
     5fe:	e6 2e       	mov	r14, r22
     600:	f7 2e       	mov	r15, r23
     602:	08 2f       	mov	r16, r24
     604:	19 2f       	mov	r17, r25

	if(angle_to_rotate<(-180)) angle_to_rotate+=360.0;
     606:	86 2f       	mov	r24, r22
     608:	9c 2d       	mov	r25, r12
     60a:	a0 2f       	mov	r26, r16
     60c:	b1 2f       	mov	r27, r17
     60e:	bc 01       	movw	r22, r24
     610:	cd 01       	movw	r24, r26
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	44 e3       	ldi	r20, 0x34	; 52
     618:	53 ec       	ldi	r21, 0xC3	; 195
     61a:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     61e:	88 23       	and	r24, r24
     620:	84 f4       	brge	.+32     	; 0x642 <_Z17calc_rotate_angle5PointS_f+0x1a0>
     622:	8d 2d       	mov	r24, r13
     624:	9c 2d       	mov	r25, r12
     626:	a0 2f       	mov	r26, r16
     628:	b1 2f       	mov	r27, r17
     62a:	bc 01       	movw	r22, r24
     62c:	cd 01       	movw	r24, r26
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	44 eb       	ldi	r20, 0xB4	; 180
     634:	53 e4       	ldi	r21, 0x43	; 67
     636:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3>
     63a:	e6 2e       	mov	r14, r22
     63c:	f7 2e       	mov	r15, r23
     63e:	08 2f       	mov	r16, r24
     640:	19 2f       	mov	r17, r25
	if(angle_to_rotate>180)    angle_to_rotate-=360.0;                                              //angle is in clockwise direction
     642:	8e 2d       	mov	r24, r14
     644:	9f 2d       	mov	r25, r15
     646:	a0 2f       	mov	r26, r16
     648:	b1 2f       	mov	r27, r17
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	44 e3       	ldi	r20, 0x34	; 52
     654:	53 e4       	ldi	r21, 0x43	; 67
     656:	0e 94 04 0a 	call	0x1408	; 0x1408 <__gesf2>
     65a:	18 16       	cp	r1, r24
     65c:	ac f4       	brge	.+42     	; 0x688 <_Z17calc_rotate_angle5PointS_f+0x1e6>
     65e:	8e 2d       	mov	r24, r14
     660:	9f 2d       	mov	r25, r15
     662:	a0 2f       	mov	r26, r16
     664:	b1 2f       	mov	r27, r17
     666:	bc 01       	movw	r22, r24
     668:	cd 01       	movw	r24, r26
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	44 eb       	ldi	r20, 0xB4	; 180
     670:	53 e4       	ldi	r21, 0x43	; 67
     672:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     676:	e6 2e       	mov	r14, r22
     678:	f7 2e       	mov	r15, r23
     67a:	08 2f       	mov	r16, r24
     67c:	19 2f       	mov	r17, r25
     67e:	04 c0       	rjmp	.+8      	; 0x688 <_Z17calc_rotate_angle5PointS_f+0x1e6>
float calc_rotate_angle(Point current_point, Point next_point, float current_angle)
{
	float x;
	if(next_point.x==current_point.x)
	{
		if (next_point.y==current_point.y) return 0;
     680:	ee 24       	eor	r14, r14
     682:	ff 24       	eor	r15, r15
     684:	00 e0       	ldi	r16, 0x00	; 0
     686:	10 e0       	ldi	r17, 0x00	; 0

	if(angle_to_rotate<(-180)) angle_to_rotate+=360.0;
	if(angle_to_rotate>180)    angle_to_rotate-=360.0;                                              //angle is in clockwise direction

	return angle_to_rotate;
}
     688:	8e 2d       	mov	r24, r14
     68a:	9f 2d       	mov	r25, r15
     68c:	a0 2f       	mov	r26, r16
     68e:	b1 2f       	mov	r27, r17
     690:	bc 01       	movw	r22, r24
     692:	cd 01       	movw	r24, r26
     694:	60 96       	adiw	r28, 0x10	; 16
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	7f 90       	pop	r7
     6ba:	6f 90       	pop	r6
     6bc:	5f 90       	pop	r5
     6be:	4f 90       	pop	r4
     6c0:	08 95       	ret

000006c2 <_Z13calc_distance5PointS_>:

float calc_distance(Point current_point, Point next_point)				//Returns the distance between two points
{
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	60 97       	sbiw	r28, 0x10	; 16
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	29 83       	std	Y+1, r18	; 0x01
     6e8:	3a 83       	std	Y+2, r19	; 0x02
     6ea:	4b 83       	std	Y+3, r20	; 0x03
     6ec:	5c 83       	std	Y+4, r21	; 0x04
     6ee:	6d 83       	std	Y+5, r22	; 0x05
     6f0:	7e 83       	std	Y+6, r23	; 0x06
     6f2:	8f 83       	std	Y+7, r24	; 0x07
     6f4:	98 87       	std	Y+8, r25	; 0x08
     6f6:	a9 86       	std	Y+9, r10	; 0x09
     6f8:	ba 86       	std	Y+10, r11	; 0x0a
     6fa:	cb 86       	std	Y+11, r12	; 0x0b
     6fc:	dc 86       	std	Y+12, r13	; 0x0c
     6fe:	ed 86       	std	Y+13, r14	; 0x0d
     700:	fe 86       	std	Y+14, r15	; 0x0e
     702:	0f 87       	std	Y+15, r16	; 0x0f
     704:	18 8b       	std	Y+16, r17	; 0x10
	return sqrt(pow(current_point.x-next_point.x,2)+pow(current_point.y-next_point.y,2));
     706:	69 81       	ldd	r22, Y+1	; 0x01
     708:	7a 81       	ldd	r23, Y+2	; 0x02
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	29 85       	ldd	r18, Y+9	; 0x09
     710:	3a 85       	ldd	r19, Y+10	; 0x0a
     712:	4b 85       	ldd	r20, Y+11	; 0x0b
     714:	5c 85       	ldd	r21, Y+12	; 0x0c
     716:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     71a:	9b 01       	movw	r18, r22
     71c:	ac 01       	movw	r20, r24
     71e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     722:	06 2f       	mov	r16, r22
     724:	17 2f       	mov	r17, r23
     726:	f8 2e       	mov	r15, r24
     728:	e9 2e       	mov	r14, r25
     72a:	6d 81       	ldd	r22, Y+5	; 0x05
     72c:	7e 81       	ldd	r23, Y+6	; 0x06
     72e:	8f 81       	ldd	r24, Y+7	; 0x07
     730:	98 85       	ldd	r25, Y+8	; 0x08
     732:	2d 85       	ldd	r18, Y+13	; 0x0d
     734:	3e 85       	ldd	r19, Y+14	; 0x0e
     736:	4f 85       	ldd	r20, Y+15	; 0x0f
     738:	58 89       	ldd	r21, Y+16	; 0x10
     73a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     746:	b6 2f       	mov	r27, r22
     748:	a7 2f       	mov	r26, r23
     74a:	38 2f       	mov	r19, r24
     74c:	29 2f       	mov	r18, r25
     74e:	40 2f       	mov	r20, r16
     750:	51 2f       	mov	r21, r17
     752:	6f 2d       	mov	r22, r15
     754:	7e 2d       	mov	r23, r14
     756:	cb 01       	movw	r24, r22
     758:	ba 01       	movw	r22, r20
     75a:	42 2f       	mov	r20, r18
     75c:	0b 2f       	mov	r16, r27
     75e:	1a 2f       	mov	r17, r26
     760:	23 2f       	mov	r18, r19
     762:	34 2f       	mov	r19, r20
     764:	a9 01       	movw	r20, r18
     766:	98 01       	movw	r18, r16
     768:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3>
     76c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <sqrt>
}
     770:	46 2f       	mov	r20, r22
     772:	57 2f       	mov	r21, r23
     774:	68 2f       	mov	r22, r24
     776:	79 2f       	mov	r23, r25
     778:	cb 01       	movw	r24, r22
     77a:	ba 01       	movw	r22, r20
     77c:	60 96       	adiw	r28, 0x10	; 16
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	af 90       	pop	r10
     79c:	08 95       	ret

0000079e <_Z20update_current_angle5PointS_Rf>:

void update_current_angle(Point current_point, Point next_point, float &current_angle)		//Updates the current orientation of the bot
{
     79e:	4f 92       	push	r4
     7a0:	5f 92       	push	r5
     7a2:	6f 92       	push	r6
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	60 97       	sbiw	r28, 0x10	; 16
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	29 83       	std	Y+1, r18	; 0x01
     7d0:	3a 83       	std	Y+2, r19	; 0x02
     7d2:	4b 83       	std	Y+3, r20	; 0x03
     7d4:	5c 83       	std	Y+4, r21	; 0x04
     7d6:	6d 83       	std	Y+5, r22	; 0x05
     7d8:	7e 83       	std	Y+6, r23	; 0x06
     7da:	8f 83       	std	Y+7, r24	; 0x07
     7dc:	98 87       	std	Y+8, r25	; 0x08
     7de:	a9 86       	std	Y+9, r10	; 0x09
     7e0:	ba 86       	std	Y+10, r11	; 0x0a
     7e2:	cb 86       	std	Y+11, r12	; 0x0b
     7e4:	dc 86       	std	Y+12, r13	; 0x0c
     7e6:	ed 86       	std	Y+13, r14	; 0x0d
     7e8:	fe 86       	std	Y+14, r15	; 0x0e
     7ea:	0f 87       	std	Y+15, r16	; 0x0f
     7ec:	18 8b       	std	Y+16, r17	; 0x10
     7ee:	84 01       	movw	r16, r8
	if(next_point.x==current_point.x)
     7f0:	69 85       	ldd	r22, Y+9	; 0x09
     7f2:	7a 85       	ldd	r23, Y+10	; 0x0a
     7f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f8:	29 81       	ldd	r18, Y+1	; 0x01
     7fa:	3a 81       	ldd	r19, Y+2	; 0x02
     7fc:	4b 81       	ldd	r20, Y+3	; 0x03
     7fe:	5c 81       	ldd	r21, Y+4	; 0x04
     800:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     804:	88 23       	and	r24, r24
     806:	91 f5       	brne	.+100    	; 0x86c <_Z20update_current_angle5PointS_Rf+0xce>
	{
		if(next_point.y==current_point.y) return;
     808:	6d 85       	ldd	r22, Y+13	; 0x0d
     80a:	7e 85       	ldd	r23, Y+14	; 0x0e
     80c:	8f 85       	ldd	r24, Y+15	; 0x0f
     80e:	98 89       	ldd	r25, Y+16	; 0x10
     810:	2d 81       	ldd	r18, Y+5	; 0x05
     812:	3e 81       	ldd	r19, Y+6	; 0x06
     814:	4f 81       	ldd	r20, Y+7	; 0x07
     816:	58 85       	ldd	r21, Y+8	; 0x08
     818:	0e 94 95 08 	call	0x112a	; 0x112a <__cmpsf2>
     81c:	88 23       	and	r24, r24
     81e:	09 f4       	brne	.+2      	; 0x822 <_Z20update_current_angle5PointS_Rf+0x84>
     820:	58 c0       	rjmp	.+176    	; 0x8d2 <_Z20update_current_angle5PointS_Rf+0x134>
		if(next_point.y-current_point.y>0) current_angle=90;
     822:	6d 85       	ldd	r22, Y+13	; 0x0d
     824:	7e 85       	ldd	r23, Y+14	; 0x0e
     826:	8f 85       	ldd	r24, Y+15	; 0x0f
     828:	98 89       	ldd	r25, Y+16	; 0x10
     82a:	2d 81       	ldd	r18, Y+5	; 0x05
     82c:	3e 81       	ldd	r19, Y+6	; 0x06
     82e:	4f 81       	ldd	r20, Y+7	; 0x07
     830:	58 85       	ldd	r21, Y+8	; 0x08
     832:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	a9 01       	movw	r20, r18
     83c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__gesf2>
     840:	18 16       	cp	r1, r24
     842:	54 f4       	brge	.+20     	; 0x858 <_Z20update_current_angle5PointS_Rf+0xba>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a4 eb       	ldi	r26, 0xB4	; 180
     84a:	b2 e4       	ldi	r27, 0x42	; 66
     84c:	f4 01       	movw	r30, r8
     84e:	80 83       	st	Z, r24
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	a2 83       	std	Z+2, r26	; 0x02
     854:	b3 83       	std	Z+3, r27	; 0x03
     856:	3d c0       	rjmp	.+122    	; 0x8d2 <_Z20update_current_angle5PointS_Rf+0x134>
		else current_angle=-90;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a4 eb       	ldi	r26, 0xB4	; 180
     85e:	b2 ec       	ldi	r27, 0xC2	; 194
     860:	f4 01       	movw	r30, r8
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	a2 83       	std	Z+2, r26	; 0x02
     868:	b3 83       	std	Z+3, r27	; 0x03
     86a:	33 c0       	rjmp	.+102    	; 0x8d2 <_Z20update_current_angle5PointS_Rf+0x134>
	}
	else current_angle=atan2(next_point.y-current_point.y, next_point.x-current_point.x)*180/3.1416;
     86c:	6d 85       	ldd	r22, Y+13	; 0x0d
     86e:	7e 85       	ldd	r23, Y+14	; 0x0e
     870:	8f 85       	ldd	r24, Y+15	; 0x0f
     872:	98 89       	ldd	r25, Y+16	; 0x10
     874:	2d 81       	ldd	r18, Y+5	; 0x05
     876:	3e 81       	ldd	r19, Y+6	; 0x06
     878:	4f 81       	ldd	r20, Y+7	; 0x07
     87a:	58 85       	ldd	r21, Y+8	; 0x08
     87c:	89 84       	ldd	r8, Y+9	; 0x09
     87e:	9a 84       	ldd	r9, Y+10	; 0x0a
     880:	ab 84       	ldd	r10, Y+11	; 0x0b
     882:	bc 84       	ldd	r11, Y+12	; 0x0c
     884:	49 80       	ldd	r4, Y+1	; 0x01
     886:	5a 80       	ldd	r5, Y+2	; 0x02
     888:	6b 80       	ldd	r6, Y+3	; 0x03
     88a:	7c 80       	ldd	r7, Y+4	; 0x04
     88c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     890:	6b 01       	movw	r12, r22
     892:	7c 01       	movw	r14, r24
     894:	c5 01       	movw	r24, r10
     896:	b4 01       	movw	r22, r8
     898:	a3 01       	movw	r20, r6
     89a:	92 01       	movw	r18, r4
     89c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 42 08 	call	0x1084	; 0x1084 <atan2>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	44 e3       	ldi	r20, 0x34	; 52
     8b2:	53 e4       	ldi	r21, 0x43	; 67
     8b4:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     8b8:	29 ef       	ldi	r18, 0xF9	; 249
     8ba:	3f e0       	ldi	r19, 0x0F	; 15
     8bc:	49 e4       	ldi	r20, 0x49	; 73
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	0e 94 99 08 	call	0x1132	; 0x1132 <__divsf3>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	f8 01       	movw	r30, r16
     8ca:	80 83       	st	Z, r24
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	a2 83       	std	Z+2, r26	; 0x02
     8d0:	b3 83       	std	Z+3, r27	; 0x03
}
     8d2:	60 96       	adiw	r28, 0x10	; 16
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	08 95       	ret

00000900 <_Z4move5PointS_f>:

void move(Point current_point, Point next_point, float current_angle)                           //moves the bot from one point to another,pass current angle by reference
{
     900:	4f 92       	push	r4
     902:	5f 92       	push	r5
     904:	6f 92       	push	r6
     906:	7f 92       	push	r7
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	60 97       	sbiw	r28, 0x10	; 16
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	29 83       	std	Y+1, r18	; 0x01
     92e:	3a 83       	std	Y+2, r19	; 0x02
     930:	4b 83       	std	Y+3, r20	; 0x03
     932:	5c 83       	std	Y+4, r21	; 0x04
     934:	6d 83       	std	Y+5, r22	; 0x05
     936:	7e 83       	std	Y+6, r23	; 0x06
     938:	8f 83       	std	Y+7, r24	; 0x07
     93a:	98 87       	std	Y+8, r25	; 0x08
     93c:	a9 86       	std	Y+9, r10	; 0x09
     93e:	ba 86       	std	Y+10, r11	; 0x0a
     940:	cb 86       	std	Y+11, r12	; 0x0b
     942:	dc 86       	std	Y+12, r13	; 0x0c
     944:	ed 86       	std	Y+13, r14	; 0x0d
     946:	fe 86       	std	Y+14, r15	; 0x0e
     948:	0f 87       	std	Y+15, r16	; 0x0f
     94a:	18 8b       	std	Y+16, r17	; 0x10
     94c:	4a a0       	lds	r20, 0x8a
     94e:	5b a0       	lds	r21, 0x8b
     950:	6c a0       	lds	r22, 0x8c
     952:	7d a0       	lds	r23, 0x8d
	if(calc_rotate_angle(current_point,next_point,current_angle)>0)                             //i.e to move clockwise i.e. right
     954:	00 d0       	rcall	.+0      	; 0x956 <_Z4move5PointS_f+0x56>
     956:	0f 92       	push	r0
     958:	ad b7       	in	r26, 0x3d	; 61
     95a:	be b7       	in	r27, 0x3e	; 62
     95c:	11 96       	adiw	r26, 0x01	; 1
     95e:	4d 92       	st	X+, r4
     960:	5d 92       	st	X+, r5
     962:	6d 92       	st	X+, r6
     964:	7c 92       	st	X, r7
     966:	14 97       	sbiw	r26, 0x04	; 4
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	3a 81       	ldd	r19, Y+2	; 0x02
     96c:	4b 81       	ldd	r20, Y+3	; 0x03
     96e:	5c 81       	ldd	r21, Y+4	; 0x04
     970:	6d 81       	ldd	r22, Y+5	; 0x05
     972:	7e 81       	ldd	r23, Y+6	; 0x06
     974:	8f 81       	ldd	r24, Y+7	; 0x07
     976:	98 85       	ldd	r25, Y+8	; 0x08
     978:	a9 84       	ldd	r10, Y+9	; 0x09
     97a:	ba 84       	ldd	r11, Y+10	; 0x0a
     97c:	cb 84       	ldd	r12, Y+11	; 0x0b
     97e:	dc 84       	ldd	r13, Y+12	; 0x0c
     980:	ed 84       	ldd	r14, Y+13	; 0x0d
     982:	fe 84       	ldd	r15, Y+14	; 0x0e
     984:	0f 85       	ldd	r16, Y+15	; 0x0f
     986:	18 89       	ldd	r17, Y+16	; 0x10
     988:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z17calc_rotate_angle5PointS_f>
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	a9 01       	movw	r20, r18
     99a:	0e 94 04 0a 	call	0x1408	; 0x1408 <__gesf2>
     99e:	18 16       	cp	r1, r24
     9a0:	2c f5       	brge	.+74     	; 0x9ec <_Z4move5PointS_f+0xec>
		right_degrees(calc_rotate_angle(current_point,next_point,current_angle));
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <_Z4move5PointS_f+0xa4>
     9a4:	0f 92       	push	r0
     9a6:	ed b7       	in	r30, 0x3d	; 61
     9a8:	fe b7       	in	r31, 0x3e	; 62
     9aa:	41 82       	std	Z+1, r4	; 0x01
     9ac:	52 82       	std	Z+2, r5	; 0x02
     9ae:	63 82       	std	Z+3, r6	; 0x03
     9b0:	74 82       	std	Z+4, r7	; 0x04
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	4b 81       	ldd	r20, Y+3	; 0x03
     9b8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ba:	6d 81       	ldd	r22, Y+5	; 0x05
     9bc:	7e 81       	ldd	r23, Y+6	; 0x06
     9be:	8f 81       	ldd	r24, Y+7	; 0x07
     9c0:	98 85       	ldd	r25, Y+8	; 0x08
     9c2:	a9 84       	ldd	r10, Y+9	; 0x09
     9c4:	ba 84       	ldd	r11, Y+10	; 0x0a
     9c6:	cb 84       	ldd	r12, Y+11	; 0x0b
     9c8:	dc 84       	ldd	r13, Y+12	; 0x0c
     9ca:	ed 84       	ldd	r14, Y+13	; 0x0d
     9cc:	fe 84       	ldd	r15, Y+14	; 0x0e
     9ce:	0f 85       	ldd	r16, Y+15	; 0x0f
     9d0:	18 89       	ldd	r17, Y+16	; 0x10
     9d2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z17calc_rotate_angle5PointS_f>
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	0e 94 12 02 	call	0x424	; 0x424 <_Z13right_degreesj>
     9ea:	27 c0       	rjmp	.+78     	; 0xa3a <_Z4move5PointS_f+0x13a>
	else 
		left_degrees(-calc_rotate_angle(current_point,next_point,current_angle));
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <_Z4move5PointS_f+0xee>
     9ee:	0f 92       	push	r0
     9f0:	ad b7       	in	r26, 0x3d	; 61
     9f2:	be b7       	in	r27, 0x3e	; 62
     9f4:	11 96       	adiw	r26, 0x01	; 1
     9f6:	4d 92       	st	X+, r4
     9f8:	5d 92       	st	X+, r5
     9fa:	6d 92       	st	X+, r6
     9fc:	7c 92       	st	X, r7
     9fe:	14 97       	sbiw	r26, 0x04	; 4
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	3a 81       	ldd	r19, Y+2	; 0x02
     a04:	4b 81       	ldd	r20, Y+3	; 0x03
     a06:	5c 81       	ldd	r21, Y+4	; 0x04
     a08:	6d 81       	ldd	r22, Y+5	; 0x05
     a0a:	7e 81       	ldd	r23, Y+6	; 0x06
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	a9 84       	ldd	r10, Y+9	; 0x09
     a12:	ba 84       	ldd	r11, Y+10	; 0x0a
     a14:	cb 84       	ldd	r12, Y+11	; 0x0b
     a16:	dc 84       	ldd	r13, Y+12	; 0x0c
     a18:	ed 84       	ldd	r14, Y+13	; 0x0d
     a1a:	fe 84       	ldd	r15, Y+14	; 0x0e
     a1c:	0f 85       	ldd	r16, Y+15	; 0x0f
     a1e:	18 89       	ldd	r17, Y+16	; 0x10
     a20:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_Z17calc_rotate_angle5PointS_f>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	90 58       	subi	r25, 0x80	; 128
     a2e:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	0e 94 07 02 	call	0x40e	; 0x40e <_Z12left_degreesj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	a8 e0       	ldi	r26, 0x08	; 8
     a40:	81 50       	subi	r24, 0x01	; 1
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	a0 40       	sbci	r26, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <_Z4move5PointS_f+0x140>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <_Z4move5PointS_f+0x14a>
     a4a:	00 00       	nop
		
	_delay_ms(200);
	
	forward_mm(calc_distance(current_point,next_point));
     a4c:	29 81       	ldd	r18, Y+1	; 0x01
     a4e:	3a 81       	ldd	r19, Y+2	; 0x02
     a50:	4b 81       	ldd	r20, Y+3	; 0x03
     a52:	5c 81       	ldd	r21, Y+4	; 0x04
     a54:	6d 81       	ldd	r22, Y+5	; 0x05
     a56:	7e 81       	ldd	r23, Y+6	; 0x06
     a58:	8f 81       	ldd	r24, Y+7	; 0x07
     a5a:	98 85       	ldd	r25, Y+8	; 0x08
     a5c:	a9 84       	ldd	r10, Y+9	; 0x09
     a5e:	ba 84       	ldd	r11, Y+10	; 0x0a
     a60:	cb 84       	ldd	r12, Y+11	; 0x0b
     a62:	dc 84       	ldd	r13, Y+12	; 0x0c
     a64:	ed 84       	ldd	r14, Y+13	; 0x0d
     a66:	fe 84       	ldd	r15, Y+14	; 0x0e
     a68:	0f 85       	ldd	r16, Y+15	; 0x0f
     a6a:	18 89       	ldd	r17, Y+16	; 0x10
     a6c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z13calc_distance5PointS_>
     a70:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_Z10forward_mmj>
}
     a7c:	60 96       	adiw	r28, 0x10	; 16
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	7f 90       	pop	r7
     a9e:	6f 90       	pop	r6
     aa0:	5f 90       	pop	r5
     aa2:	4f 90       	pop	r4
     aa4:	08 95       	ret

00000aa6 <_Z10uart0_initv>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     aa6:	e1 ec       	ldi	r30, 0xC1	; 193
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     aac:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     ab0:	86 e0       	ldi	r24, 0x06	; 6
     ab2:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     ab6:	8f e5       	ldi	r24, 0x5F	; 95
     ab8:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     abc:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     ac0:	88 e9       	ldi	r24, 0x98	; 152
     ac2:	80 83       	st	Z, r24
}
     ac4:	08 95       	ret

00000ac6 <_Z12servo_1_freev>:
//servo_free functions unlocks the servo motors from the any angle
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravit
void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	80 93 88 00 	sts	0x0088, r24
}
     ad2:	08 95       	ret

00000ad4 <_Z7servo_1h>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     ad4:	10 92 89 00 	sts	0x0089, r1
}
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     ad8:	68 2f       	mov	r22, r24
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatunsisf>
     ae4:	2b e7       	ldi	r18, 0x7B	; 123
     ae6:	34 e1       	ldi	r19, 0x14	; 20
     ae8:	4e ee       	ldi	r20, 0xEE	; 238
     aea:	5f e3       	ldi	r21, 0x3F	; 63
     aec:	0e 94 99 08 	call	0x1132	; 0x1132 <__divsf3>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4c e0       	ldi	r20, 0x0C	; 12
     af6:	52 e4       	ldi	r21, 0x42	; 66
     af8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     afc:	0e 94 01 09 	call	0x1202	; 0x1202 <__fixunssfsi>
     b00:	60 93 88 00 	sts	0x0088, r22
}
     b04:	08 95       	ret

00000b06 <_Z17servo1_pin_configv>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     b06:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     b08:	2d 9a       	sbi	0x05, 5	; 5
}
     b0a:	08 95       	ret

00000b0c <_Z11timer1_initv>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     b0c:	e1 e8       	ldi	r30, 0x81	; 129
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     b12:	8c ef       	ldi	r24, 0xFC	; 252
     b14:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     b2a:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     b2e:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     b32:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     b36:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     b3a:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     b3e:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     b42:	8b ea       	ldi	r24, 0xAB	; 171
     b44:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     b48:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     b4c:	8c e0       	ldi	r24, 0x0C	; 12
     b4e:	80 83       	st	Z, r24
}
     b50:	08 95       	ret

00000b52 <_Z5penUpv>:


void penUp()
{
	servo_1(120);			//Moves the pen up
     b52:	88 e7       	ldi	r24, 0x78	; 120
     b54:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z7servo_1h>
}
     b58:	08 95       	ret

00000b5a <_Z7penDownv>:

void penDown()
{
	servo_1(93);                     //93 is an experimentally determined value,Moves the pen down
     b5a:	8d e5       	ldi	r24, 0x5D	; 93
     b5c:	0e 94 6a 05 	call	0xad4	; 0xad4 <_Z7servo_1h>
}
     b60:	08 95       	ret

00000b62 <_Z9buzzer_onv>:
#include "servo.h"

void buzzer_on (void)	//Turn on buzzer
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     b62:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     b64:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     b66:	88 b9       	out	0x08, r24	; 8
}
     b68:	08 95       	ret

00000b6a <_Z10buzzer_offv>:

void buzzer_off (void)	//turn off buzzer
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     b6a:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     b6c:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     b6e:	88 b9       	out	0x08, r24	; 8
}
     b70:	08 95       	ret

00000b72 <__vector_25>:
Point B={x1,y1};
char angle;


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	0b b6       	in	r0, 0x3b	; 59
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'command' variable
     bac:	60 91 c6 00 	lds	r22, 0x00C6
     bb0:	60 93 29 02 	sts	0x0229, r22

	if(state==0)
     bb4:	80 91 17 02 	lds	r24, 0x0217
     bb8:	90 91 18 02 	lds	r25, 0x0218
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a1 f4       	brne	.+40     	; 0xbe8 <__vector_25+0x76>
	{
		state=1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	90 93 18 02 	sts	0x0218, r25
     bc8:	80 93 17 02 	sts	0x0217, r24
		buzzer_on();
     bcc:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z9buzzer_onv>
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	9f e7       	ldi	r25, 0x7F	; 127
     bd4:	a4 e0       	ldi	r26, 0x04	; 4
     bd6:	81 50       	subi	r24, 0x01	; 1
     bd8:	90 40       	sbci	r25, 0x00	; 0
     bda:	a0 40       	sbci	r26, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <__vector_25+0x64>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <__vector_25+0x6e>
     be0:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
     be2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_Z10buzzer_offv>
     be6:	5e c1       	rjmp	.+700    	; 0xea4 <__vector_25+0x332>
	}
	
	else if(state==1)                        //receive command
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	91 05       	cpc	r25, r1
     bec:	21 f5       	brne	.+72     	; 0xc36 <__vector_25+0xc4>
	{
		
		if(data==0)
     bee:	66 23       	and	r22, r22
     bf0:	39 f4       	brne	.+14     	; 0xc00 <__vector_25+0x8e>
		{
			state=2;
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	90 93 18 02 	sts	0x0218, r25
     bfa:	80 93 17 02 	sts	0x0217, r24
     bfe:	52 c1       	rjmp	.+676    	; 0xea4 <__vector_25+0x332>
		}

		else if(data==1)
     c00:	61 30       	cpi	r22, 0x01	; 1
     c02:	59 f4       	brne	.+22     	; 0xc1a <__vector_25+0xa8>
		{
			sei();
     c04:	78 94       	sei
			//penup
			penUp();
     c06:	0e 94 a9 05 	call	0xb52	; 0xb52 <_Z5penUpv>
			state=2;
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 18 02 	sts	0x0218, r25
     c12:	80 93 17 02 	sts	0x0217, r24
			cli();
     c16:	f8 94       	cli
     c18:	45 c1       	rjmp	.+650    	; 0xea4 <__vector_25+0x332>
		}

		else if(data==2)
     c1a:	62 30       	cpi	r22, 0x02	; 2
     c1c:	09 f0       	breq	.+2      	; 0xc20 <__vector_25+0xae>
     c1e:	42 c1       	rjmp	.+644    	; 0xea4 <__vector_25+0x332>
		{
			sei();
     c20:	78 94       	sei
			//pendown
			penDown();
     c22:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_Z7penDownv>
			state=2;
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	90 93 18 02 	sts	0x0218, r25
     c2e:	80 93 17 02 	sts	0x0217, r24
			cli();
     c32:	f8 94       	cli
     c34:	37 c1       	rjmp	.+622    	; 0xea4 <__vector_25+0x332>
		}
	}

	else if(state==2)                  //receive x-coordinate
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	91 05       	cpc	r25, r1
     c3a:	b1 f4       	brne	.+44     	; 0xc68 <__vector_25+0xf6>
	{
		x1=data;
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatunsisf>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	80 93 25 02 	sts	0x0225, r24
     c4e:	90 93 26 02 	sts	0x0226, r25
     c52:	a0 93 27 02 	sts	0x0227, r26
     c56:	b0 93 28 02 	sts	0x0228, r27
		state=3;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	90 93 18 02 	sts	0x0218, r25
     c62:	80 93 17 02 	sts	0x0217, r24
     c66:	1e c1       	rjmp	.+572    	; 0xea4 <__vector_25+0x332>
	}	
	
	else if(state==3)                 //sign of x-coordinate
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	91 05       	cpc	r25, r1
     c6c:	11 f5       	brne	.+68     	; 0xcb2 <__vector_25+0x140>
	{
		
		if(data==1)
     c6e:	61 30       	cpi	r22, 0x01	; 1
     c70:	c9 f4       	brne	.+50     	; 0xca4 <__vector_25+0x132>
		{
			x1 = -(255 - x1);
     c72:	20 91 25 02 	lds	r18, 0x0225
     c76:	30 91 26 02 	lds	r19, 0x0226
     c7a:	40 91 27 02 	lds	r20, 0x0227
     c7e:	50 91 28 02 	lds	r21, 0x0228
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	8f e7       	ldi	r24, 0x7F	; 127
     c88:	93 e4       	ldi	r25, 0x43	; 67
     c8a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	b0 58       	subi	r27, 0x80	; 128
     c94:	80 93 25 02 	sts	0x0225, r24
     c98:	90 93 26 02 	sts	0x0226, r25
     c9c:	a0 93 27 02 	sts	0x0227, r26
     ca0:	b0 93 28 02 	sts	0x0228, r27
		}
		state=4;
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 18 02 	sts	0x0218, r25
     cac:	80 93 17 02 	sts	0x0217, r24
     cb0:	f9 c0       	rjmp	.+498    	; 0xea4 <__vector_25+0x332>
	}

	else if(state==4)                //receive y-coordinate
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	91 05       	cpc	r25, r1
     cb6:	b1 f4       	brne	.+44     	; 0xce4 <__vector_25+0x172>
	{
		
		y1=data;
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatunsisf>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	80 93 21 02 	sts	0x0221, r24
     cca:	90 93 22 02 	sts	0x0222, r25
     cce:	a0 93 23 02 	sts	0x0223, r26
     cd2:	b0 93 24 02 	sts	0x0224, r27
		state=5;
     cd6:	85 e0       	ldi	r24, 0x05	; 5
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 18 02 	sts	0x0218, r25
     cde:	80 93 17 02 	sts	0x0217, r24
     ce2:	e0 c0       	rjmp	.+448    	; 0xea4 <__vector_25+0x332>
	}

	else if(state==5)               //sign of y-coordinate and move
     ce4:	85 30       	cpi	r24, 0x05	; 5
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_25+0x17a>
     cea:	dc c0       	rjmp	.+440    	; 0xea4 <__vector_25+0x332>
	{
		buzzer_on();
     cec:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z9buzzer_onv>
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9f e7       	ldi	r25, 0x7F	; 127
     cf4:	a4 e0       	ldi	r26, 0x04	; 4
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	a0 40       	sbci	r26, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <__vector_25+0x184>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <__vector_25+0x18e>
     d00:	00 00       	nop
		_delay_ms(100);
		buzzer_off();
     d02:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_Z10buzzer_offv>
		if(data==1)
     d06:	80 91 29 02 	lds	r24, 0x0229
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	c9 f4       	brne	.+50     	; 0xd40 <__vector_25+0x1ce>
		{
			y1 = -(255 - y1);
     d0e:	20 91 21 02 	lds	r18, 0x0221
     d12:	30 91 22 02 	lds	r19, 0x0222
     d16:	40 91 23 02 	lds	r20, 0x0223
     d1a:	50 91 24 02 	lds	r21, 0x0224
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	8f e7       	ldi	r24, 0x7F	; 127
     d24:	93 e4       	ldi	r25, 0x43	; 67
     d26:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__subsf3>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	b0 58       	subi	r27, 0x80	; 128
     d30:	80 93 21 02 	sts	0x0221, r24
     d34:	90 93 22 02 	sts	0x0222, r25
     d38:	a0 93 23 02 	sts	0x0223, r26
     d3c:	b0 93 24 02 	sts	0x0224, r27
		}

		A.x=x_base; A.y=y_base;
     d40:	80 91 1d 02 	lds	r24, 0x021D
     d44:	90 91 1e 02 	lds	r25, 0x021E
     d48:	a0 91 1f 02 	lds	r26, 0x021F
     d4c:	b0 91 20 02 	lds	r27, 0x0220
     d50:	80 93 0d 02 	sts	0x020D, r24
     d54:	90 93 0e 02 	sts	0x020E, r25
     d58:	a0 93 0f 02 	sts	0x020F, r26
     d5c:	b0 93 10 02 	sts	0x0210, r27
     d60:	80 91 19 02 	lds	r24, 0x0219
     d64:	90 91 1a 02 	lds	r25, 0x021A
     d68:	a0 91 1b 02 	lds	r26, 0x021B
     d6c:	b0 91 1c 02 	lds	r27, 0x021C
     d70:	80 93 11 02 	sts	0x0211, r24
     d74:	90 93 12 02 	sts	0x0212, r25
     d78:	a0 93 13 02 	sts	0x0213, r26
     d7c:	b0 93 14 02 	sts	0x0214, r27
		B.x=x1; B.y=y1;
     d80:	80 91 25 02 	lds	r24, 0x0225
     d84:	90 91 26 02 	lds	r25, 0x0226
     d88:	a0 91 27 02 	lds	r26, 0x0227
     d8c:	b0 91 28 02 	lds	r27, 0x0228
     d90:	80 93 05 02 	sts	0x0205, r24
     d94:	90 93 06 02 	sts	0x0206, r25
     d98:	a0 93 07 02 	sts	0x0207, r26
     d9c:	b0 93 08 02 	sts	0x0208, r27
     da0:	80 91 21 02 	lds	r24, 0x0221
     da4:	90 91 22 02 	lds	r25, 0x0222
     da8:	a0 91 23 02 	lds	r26, 0x0223
     dac:	b0 91 24 02 	lds	r27, 0x0224
     db0:	80 93 09 02 	sts	0x0209, r24
     db4:	90 93 0a 02 	sts	0x020A, r25
     db8:	a0 93 0b 02 	sts	0x020B, r26
     dbc:	b0 93 0c 02 	sts	0x020C, r27

		sei();
     dc0:	78 94       	sei

		move(A,B,current_angle);
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <__vector_25+0x252>
     dc4:	0f 92       	push	r0
     dc6:	80 91 00 02 	lds	r24, 0x0200
     dca:	90 91 01 02 	lds	r25, 0x0201
     dce:	a0 91 02 02 	lds	r26, 0x0202
     dd2:	b0 91 03 02 	lds	r27, 0x0203
     dd6:	ed b7       	in	r30, 0x3d	; 61
     dd8:	fe b7       	in	r31, 0x3e	; 62
     dda:	81 83       	std	Z+1, r24	; 0x01
     ddc:	92 83       	std	Z+2, r25	; 0x02
     dde:	a3 83       	std	Z+3, r26	; 0x03
     de0:	b4 83       	std	Z+4, r27	; 0x04
     de2:	20 91 0d 02 	lds	r18, 0x020D
     de6:	30 91 0e 02 	lds	r19, 0x020E
     dea:	40 91 0f 02 	lds	r20, 0x020F
     dee:	50 91 10 02 	lds	r21, 0x0210
     df2:	60 91 11 02 	lds	r22, 0x0211
     df6:	70 91 12 02 	lds	r23, 0x0212
     dfa:	80 91 13 02 	lds	r24, 0x0213
     dfe:	90 91 14 02 	lds	r25, 0x0214
     e02:	a0 90 05 02 	lds	r10, 0x0205
     e06:	b0 90 06 02 	lds	r11, 0x0206
     e0a:	c0 90 07 02 	lds	r12, 0x0207
     e0e:	d0 90 08 02 	lds	r13, 0x0208
     e12:	e0 90 09 02 	lds	r14, 0x0209
     e16:	f0 90 0a 02 	lds	r15, 0x020A
     e1a:	00 91 0b 02 	lds	r16, 0x020B
     e1e:	10 91 0c 02 	lds	r17, 0x020C
     e22:	0e 94 80 04 	call	0x900	; 0x900 <_Z4move5PointS_f>
		update_current_angle(A,B,current_angle);
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	20 91 0d 02 	lds	r18, 0x020D
     e32:	30 91 0e 02 	lds	r19, 0x020E
     e36:	40 91 0f 02 	lds	r20, 0x020F
     e3a:	50 91 10 02 	lds	r21, 0x0210
     e3e:	60 91 11 02 	lds	r22, 0x0211
     e42:	70 91 12 02 	lds	r23, 0x0212
     e46:	80 91 13 02 	lds	r24, 0x0213
     e4a:	90 91 14 02 	lds	r25, 0x0214
     e4e:	a0 90 05 02 	lds	r10, 0x0205
     e52:	b0 90 06 02 	lds	r11, 0x0206
     e56:	c0 90 07 02 	lds	r12, 0x0207
     e5a:	d0 90 08 02 	lds	r13, 0x0208
     e5e:	e0 90 09 02 	lds	r14, 0x0209
     e62:	f0 90 0a 02 	lds	r15, 0x020A
     e66:	00 91 0b 02 	lds	r16, 0x020B
     e6a:	10 91 0c 02 	lds	r17, 0x020C
     e6e:	0f 2e       	mov	r0, r31
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8f 2e       	mov	r8, r31
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	9f 2e       	mov	r9, r31
     e78:	f0 2d       	mov	r31, r0
     e7a:	0e 94 cf 03 	call	0x79e	; 0x79e <_Z20update_current_angle5PointS_Rf>

		state=1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 18 02 	sts	0x0218, r25
     e86:	80 93 17 02 	sts	0x0217, r24
		
		UDR0=data;			//send status data back to XBee
     e8a:	80 91 29 02 	lds	r24, 0x0229
     e8e:	80 93 c6 00 	sts	0x00C6, r24
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f e7       	ldi	r25, 0x7F	; 127
     e96:	a4 e0       	ldi	r26, 0x04	; 4
     e98:	81 50       	subi	r24, 0x01	; 1
     e9a:	90 40       	sbci	r25, 0x00	; 0
     e9c:	a0 40       	sbci	r26, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <__vector_25+0x326>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <__vector_25+0x330>
     ea2:	00 00       	nop
		_delay_ms(100);
		
	}

	UDR0=data;				//send status data back to XBee
     ea4:	80 91 29 02 	lds	r24, 0x0229
     ea8:	80 93 c6 00 	sts	0x00C6, r24
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	9f e7       	ldi	r25, 0x7F	; 127
     eb0:	a4 e0       	ldi	r26, 0x04	; 4
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	90 40       	sbci	r25, 0x00	; 0
     eb6:	a0 40       	sbci	r26, 0x00	; 0
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <__vector_25+0x340>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <__vector_25+0x34a>
     ebc:	00 00       	nop
	_delay_ms(100);

}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	0f 90       	pop	r0
     eec:	0b be       	out	0x3b, r0	; 59
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <main>:

int main()
{
	cli();
     ef8:	f8 94       	cli
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     efa:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     efc:	43 98       	cbi	0x08, 3	; 8
	motion_pin_config();		
     efe:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z17motion_pin_configv>
	position_encoder_init();
     f02:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z21position_encoder_initv>
	uart0_init();
     f06:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z10uart0_initv>
	timer1_init();
     f0a:	0e 94 86 05 	call	0xb0c	; 0xb0c <_Z11timer1_initv>
	servo1_pin_config();
     f0e:	0e 94 83 05 	call	0xb06	; 0xb06 <_Z17servo1_pin_configv>
	sei();
     f12:	78 94       	sei
	penUp();
     f14:	0e 94 a9 05 	call	0xb52	; 0xb52 <_Z5penUpv>
     f18:	ff cf       	rjmp	.-2      	; 0xf18 <main+0x20>

00000f1a <_GLOBAL__sub_I__Z17motion_pin_configv>:
char data;
volatile float x1=0,y1=0, x_base=0, y_base=0;		//store the corrent coordinates and previous coordinates respectively
int state=0;
int proceed=0;
float current_angle=90.0;
Point A={x_base,y_base};
     f1a:	80 91 1d 02 	lds	r24, 0x021D
     f1e:	90 91 1e 02 	lds	r25, 0x021E
     f22:	a0 91 1f 02 	lds	r26, 0x021F
     f26:	b0 91 20 02 	lds	r27, 0x0220
     f2a:	80 93 0d 02 	sts	0x020D, r24
     f2e:	90 93 0e 02 	sts	0x020E, r25
     f32:	a0 93 0f 02 	sts	0x020F, r26
     f36:	b0 93 10 02 	sts	0x0210, r27
     f3a:	80 91 19 02 	lds	r24, 0x0219
     f3e:	90 91 1a 02 	lds	r25, 0x021A
     f42:	a0 91 1b 02 	lds	r26, 0x021B
     f46:	b0 91 1c 02 	lds	r27, 0x021C
     f4a:	80 93 11 02 	sts	0x0211, r24
     f4e:	90 93 12 02 	sts	0x0212, r25
     f52:	a0 93 13 02 	sts	0x0213, r26
     f56:	b0 93 14 02 	sts	0x0214, r27
Point B={x1,y1};
     f5a:	80 91 25 02 	lds	r24, 0x0225
     f5e:	90 91 26 02 	lds	r25, 0x0226
     f62:	a0 91 27 02 	lds	r26, 0x0227
     f66:	b0 91 28 02 	lds	r27, 0x0228
     f6a:	80 93 05 02 	sts	0x0205, r24
     f6e:	90 93 06 02 	sts	0x0206, r25
     f72:	a0 93 07 02 	sts	0x0207, r26
     f76:	b0 93 08 02 	sts	0x0208, r27
     f7a:	80 91 21 02 	lds	r24, 0x0221
     f7e:	90 91 22 02 	lds	r25, 0x0222
     f82:	a0 91 23 02 	lds	r26, 0x0223
     f86:	b0 91 24 02 	lds	r27, 0x0224
     f8a:	80 93 09 02 	sts	0x0209, r24
     f8e:	90 93 0a 02 	sts	0x020A, r25
     f92:	a0 93 0b 02 	sts	0x020B, r26
     f96:	b0 93 0c 02 	sts	0x020C, r27
	servo1_pin_config();
	sei();
	penUp();

	while(1);
}
     f9a:	08 95       	ret

00000f9c <__subsf3>:
     f9c:	50 58       	subi	r21, 0x80	; 128

00000f9e <__addsf3>:
     f9e:	bb 27       	eor	r27, r27
     fa0:	aa 27       	eor	r26, r26
     fa2:	0e d0       	rcall	.+28     	; 0xfc0 <__addsf3x>
     fa4:	f7 c1       	rjmp	.+1006   	; 0x1394 <__fp_round>
     fa6:	e8 d1       	rcall	.+976    	; 0x1378 <__fp_pscA>
     fa8:	30 f0       	brcs	.+12     	; 0xfb6 <__addsf3+0x18>
     faa:	ed d1       	rcall	.+986    	; 0x1386 <__fp_pscB>
     fac:	20 f0       	brcs	.+8      	; 0xfb6 <__addsf3+0x18>
     fae:	31 f4       	brne	.+12     	; 0xfbc <__addsf3+0x1e>
     fb0:	9f 3f       	cpi	r25, 0xFF	; 255
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <__addsf3+0x1a>
     fb4:	1e f4       	brtc	.+6      	; 0xfbc <__addsf3+0x1e>
     fb6:	b8 c1       	rjmp	.+880    	; 0x1328 <__fp_nan>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3+0x1e>
     fba:	e0 95       	com	r30
     fbc:	e7 fb       	bst	r30, 7
     fbe:	ae c1       	rjmp	.+860    	; 0x131c <__fp_inf>

00000fc0 <__addsf3x>:
     fc0:	e9 2f       	mov	r30, r25
     fc2:	f9 d1       	rcall	.+1010   	; 0x13b6 <__fp_split3>
     fc4:	80 f3       	brcs	.-32     	; 0xfa6 <__addsf3+0x8>
     fc6:	ba 17       	cp	r27, r26
     fc8:	62 07       	cpc	r22, r18
     fca:	73 07       	cpc	r23, r19
     fcc:	84 07       	cpc	r24, r20
     fce:	95 07       	cpc	r25, r21
     fd0:	18 f0       	brcs	.+6      	; 0xfd8 <__addsf3x+0x18>
     fd2:	71 f4       	brne	.+28     	; 0xff0 <__addsf3x+0x30>
     fd4:	9e f5       	brtc	.+102    	; 0x103c <__addsf3x+0x7c>
     fd6:	11 c2       	rjmp	.+1058   	; 0x13fa <__fp_zero>
     fd8:	0e f4       	brtc	.+2      	; 0xfdc <__addsf3x+0x1c>
     fda:	e0 95       	com	r30
     fdc:	0b 2e       	mov	r0, r27
     fde:	ba 2f       	mov	r27, r26
     fe0:	a0 2d       	mov	r26, r0
     fe2:	0b 01       	movw	r0, r22
     fe4:	b9 01       	movw	r22, r18
     fe6:	90 01       	movw	r18, r0
     fe8:	0c 01       	movw	r0, r24
     fea:	ca 01       	movw	r24, r20
     fec:	a0 01       	movw	r20, r0
     fee:	11 24       	eor	r1, r1
     ff0:	ff 27       	eor	r31, r31
     ff2:	59 1b       	sub	r21, r25
     ff4:	99 f0       	breq	.+38     	; 0x101c <__addsf3x+0x5c>
     ff6:	59 3f       	cpi	r21, 0xF9	; 249
     ff8:	50 f4       	brcc	.+20     	; 0x100e <__addsf3x+0x4e>
     ffa:	50 3e       	cpi	r21, 0xE0	; 224
     ffc:	68 f1       	brcs	.+90     	; 0x1058 <__addsf3x+0x98>
     ffe:	1a 16       	cp	r1, r26
    1000:	f0 40       	sbci	r31, 0x00	; 0
    1002:	a2 2f       	mov	r26, r18
    1004:	23 2f       	mov	r18, r19
    1006:	34 2f       	mov	r19, r20
    1008:	44 27       	eor	r20, r20
    100a:	58 5f       	subi	r21, 0xF8	; 248
    100c:	f3 cf       	rjmp	.-26     	; 0xff4 <__addsf3x+0x34>
    100e:	46 95       	lsr	r20
    1010:	37 95       	ror	r19
    1012:	27 95       	ror	r18
    1014:	a7 95       	ror	r26
    1016:	f0 40       	sbci	r31, 0x00	; 0
    1018:	53 95       	inc	r21
    101a:	c9 f7       	brne	.-14     	; 0x100e <__addsf3x+0x4e>
    101c:	7e f4       	brtc	.+30     	; 0x103c <__addsf3x+0x7c>
    101e:	1f 16       	cp	r1, r31
    1020:	ba 0b       	sbc	r27, r26
    1022:	62 0b       	sbc	r22, r18
    1024:	73 0b       	sbc	r23, r19
    1026:	84 0b       	sbc	r24, r20
    1028:	ba f0       	brmi	.+46     	; 0x1058 <__addsf3x+0x98>
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	a1 f0       	breq	.+40     	; 0x1056 <__addsf3x+0x96>
    102e:	ff 0f       	add	r31, r31
    1030:	bb 1f       	adc	r27, r27
    1032:	66 1f       	adc	r22, r22
    1034:	77 1f       	adc	r23, r23
    1036:	88 1f       	adc	r24, r24
    1038:	c2 f7       	brpl	.-16     	; 0x102a <__addsf3x+0x6a>
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <__addsf3x+0x98>
    103c:	ba 0f       	add	r27, r26
    103e:	62 1f       	adc	r22, r18
    1040:	73 1f       	adc	r23, r19
    1042:	84 1f       	adc	r24, r20
    1044:	48 f4       	brcc	.+18     	; 0x1058 <__addsf3x+0x98>
    1046:	87 95       	ror	r24
    1048:	77 95       	ror	r23
    104a:	67 95       	ror	r22
    104c:	b7 95       	ror	r27
    104e:	f7 95       	ror	r31
    1050:	9e 3f       	cpi	r25, 0xFE	; 254
    1052:	08 f0       	brcs	.+2      	; 0x1056 <__addsf3x+0x96>
    1054:	b3 cf       	rjmp	.-154    	; 0xfbc <__addsf3+0x1e>
    1056:	93 95       	inc	r25
    1058:	88 0f       	add	r24, r24
    105a:	08 f0       	brcs	.+2      	; 0x105e <__addsf3x+0x9e>
    105c:	99 27       	eor	r25, r25
    105e:	ee 0f       	add	r30, r30
    1060:	97 95       	ror	r25
    1062:	87 95       	ror	r24
    1064:	08 95       	ret
    1066:	88 d1       	rcall	.+784    	; 0x1378 <__fp_pscA>
    1068:	58 f0       	brcs	.+22     	; 0x1080 <__addsf3x+0xc0>
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	09 f4       	brne	.+2      	; 0x1072 <__addsf3x+0xb2>
    1070:	9e ef       	ldi	r25, 0xFE	; 254
    1072:	89 d1       	rcall	.+786    	; 0x1386 <__fp_pscB>
    1074:	28 f0       	brcs	.+10     	; 0x1080 <__addsf3x+0xc0>
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	51 e0       	ldi	r21, 0x01	; 1
    107a:	59 f4       	brne	.+22     	; 0x1092 <atan2+0xe>
    107c:	5e ef       	ldi	r21, 0xFE	; 254
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <atan2+0xe>
    1080:	53 c1       	rjmp	.+678    	; 0x1328 <__fp_nan>
    1082:	bb c1       	rjmp	.+886    	; 0x13fa <__fp_zero>

00001084 <atan2>:
    1084:	e9 2f       	mov	r30, r25
    1086:	e0 78       	andi	r30, 0x80	; 128
    1088:	96 d1       	rcall	.+812    	; 0x13b6 <__fp_split3>
    108a:	68 f3       	brcs	.-38     	; 0x1066 <__addsf3x+0xa6>
    108c:	09 2e       	mov	r0, r25
    108e:	05 2a       	or	r0, r21
    1090:	c1 f3       	breq	.-16     	; 0x1082 <__addsf3x+0xc2>
    1092:	26 17       	cp	r18, r22
    1094:	37 07       	cpc	r19, r23
    1096:	48 07       	cpc	r20, r24
    1098:	59 07       	cpc	r21, r25
    109a:	38 f0       	brcs	.+14     	; 0x10aa <atan2+0x26>
    109c:	0e 2e       	mov	r0, r30
    109e:	07 f8       	bld	r0, 7
    10a0:	e0 25       	eor	r30, r0
    10a2:	69 f0       	breq	.+26     	; 0x10be <atan2+0x3a>
    10a4:	e0 25       	eor	r30, r0
    10a6:	e0 64       	ori	r30, 0x40	; 64
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <atan2+0x3a>
    10aa:	ef 63       	ori	r30, 0x3F	; 63
    10ac:	07 f8       	bld	r0, 7
    10ae:	00 94       	com	r0
    10b0:	07 fa       	bst	r0, 7
    10b2:	db 01       	movw	r26, r22
    10b4:	b9 01       	movw	r22, r18
    10b6:	9d 01       	movw	r18, r26
    10b8:	dc 01       	movw	r26, r24
    10ba:	ca 01       	movw	r24, r20
    10bc:	ad 01       	movw	r20, r26
    10be:	ef 93       	push	r30
    10c0:	47 d0       	rcall	.+142    	; 0x1150 <__divsf3_pse>
    10c2:	68 d1       	rcall	.+720    	; 0x1394 <__fp_round>
    10c4:	0a d0       	rcall	.+20     	; 0x10da <atan>
    10c6:	5f 91       	pop	r21
    10c8:	55 23       	and	r21, r21
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <atan2+0x54>
    10cc:	2b ed       	ldi	r18, 0xDB	; 219
    10ce:	3f e0       	ldi	r19, 0x0F	; 15
    10d0:	49 e4       	ldi	r20, 0x49	; 73
    10d2:	50 fd       	sbrc	r21, 0
    10d4:	49 ec       	ldi	r20, 0xC9	; 201
    10d6:	63 cf       	rjmp	.-314    	; 0xf9e <__addsf3>
    10d8:	08 95       	ret

000010da <atan>:
    10da:	df 93       	push	r29
    10dc:	dd 27       	eor	r29, r29
    10de:	b9 2f       	mov	r27, r25
    10e0:	bf 77       	andi	r27, 0x7F	; 127
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	48 07       	cpc	r20, r24
    10ec:	5b 07       	cpc	r21, r27
    10ee:	10 f4       	brcc	.+4      	; 0x10f4 <atan+0x1a>
    10f0:	d9 2f       	mov	r29, r25
    10f2:	8e d1       	rcall	.+796    	; 0x1410 <inverse>
    10f4:	9f 93       	push	r25
    10f6:	8f 93       	push	r24
    10f8:	7f 93       	push	r23
    10fa:	6f 93       	push	r22
    10fc:	35 d2       	rcall	.+1130   	; 0x1568 <square>
    10fe:	e4 ee       	ldi	r30, 0xE4	; 228
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	15 d1       	rcall	.+554    	; 0x132e <__fp_powser>
    1104:	47 d1       	rcall	.+654    	; 0x1394 <__fp_round>
    1106:	2f 91       	pop	r18
    1108:	3f 91       	pop	r19
    110a:	4f 91       	pop	r20
    110c:	5f 91       	pop	r21
    110e:	93 d1       	rcall	.+806    	; 0x1436 <__mulsf3x>
    1110:	dd 23       	and	r29, r29
    1112:	49 f0       	breq	.+18     	; 0x1126 <atan+0x4c>
    1114:	90 58       	subi	r25, 0x80	; 128
    1116:	a2 ea       	ldi	r26, 0xA2	; 162
    1118:	2a ed       	ldi	r18, 0xDA	; 218
    111a:	3f e0       	ldi	r19, 0x0F	; 15
    111c:	49 ec       	ldi	r20, 0xC9	; 201
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	d0 78       	andi	r29, 0x80	; 128
    1122:	5d 27       	eor	r21, r29
    1124:	4d df       	rcall	.-358    	; 0xfc0 <__addsf3x>
    1126:	df 91       	pop	r29
    1128:	35 c1       	rjmp	.+618    	; 0x1394 <__fp_round>

0000112a <__cmpsf2>:
    112a:	d4 d0       	rcall	.+424    	; 0x12d4 <__fp_cmp>
    112c:	08 f4       	brcc	.+2      	; 0x1130 <__cmpsf2+0x6>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	08 95       	ret

00001132 <__divsf3>:
    1132:	0c d0       	rcall	.+24     	; 0x114c <__divsf3x>
    1134:	2f c1       	rjmp	.+606    	; 0x1394 <__fp_round>
    1136:	27 d1       	rcall	.+590    	; 0x1386 <__fp_pscB>
    1138:	40 f0       	brcs	.+16     	; 0x114a <__divsf3+0x18>
    113a:	1e d1       	rcall	.+572    	; 0x1378 <__fp_pscA>
    113c:	30 f0       	brcs	.+12     	; 0x114a <__divsf3+0x18>
    113e:	21 f4       	brne	.+8      	; 0x1148 <__divsf3+0x16>
    1140:	5f 3f       	cpi	r21, 0xFF	; 255
    1142:	19 f0       	breq	.+6      	; 0x114a <__divsf3+0x18>
    1144:	eb c0       	rjmp	.+470    	; 0x131c <__fp_inf>
    1146:	51 11       	cpse	r21, r1
    1148:	59 c1       	rjmp	.+690    	; 0x13fc <__fp_szero>
    114a:	ee c0       	rjmp	.+476    	; 0x1328 <__fp_nan>

0000114c <__divsf3x>:
    114c:	34 d1       	rcall	.+616    	; 0x13b6 <__fp_split3>
    114e:	98 f3       	brcs	.-26     	; 0x1136 <__divsf3+0x4>

00001150 <__divsf3_pse>:
    1150:	99 23       	and	r25, r25
    1152:	c9 f3       	breq	.-14     	; 0x1146 <__divsf3+0x14>
    1154:	55 23       	and	r21, r21
    1156:	b1 f3       	breq	.-20     	; 0x1144 <__divsf3+0x12>
    1158:	95 1b       	sub	r25, r21
    115a:	55 0b       	sbc	r21, r21
    115c:	bb 27       	eor	r27, r27
    115e:	aa 27       	eor	r26, r26
    1160:	62 17       	cp	r22, r18
    1162:	73 07       	cpc	r23, r19
    1164:	84 07       	cpc	r24, r20
    1166:	38 f0       	brcs	.+14     	; 0x1176 <__divsf3_pse+0x26>
    1168:	9f 5f       	subi	r25, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	44 1f       	adc	r20, r20
    1172:	aa 1f       	adc	r26, r26
    1174:	a9 f3       	breq	.-22     	; 0x1160 <__divsf3_pse+0x10>
    1176:	33 d0       	rcall	.+102    	; 0x11de <__divsf3_pse+0x8e>
    1178:	0e 2e       	mov	r0, r30
    117a:	3a f0       	brmi	.+14     	; 0x118a <__divsf3_pse+0x3a>
    117c:	e0 e8       	ldi	r30, 0x80	; 128
    117e:	30 d0       	rcall	.+96     	; 0x11e0 <__divsf3_pse+0x90>
    1180:	91 50       	subi	r25, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	e6 95       	lsr	r30
    1186:	00 1c       	adc	r0, r0
    1188:	ca f7       	brpl	.-14     	; 0x117c <__divsf3_pse+0x2c>
    118a:	29 d0       	rcall	.+82     	; 0x11de <__divsf3_pse+0x8e>
    118c:	fe 2f       	mov	r31, r30
    118e:	27 d0       	rcall	.+78     	; 0x11de <__divsf3_pse+0x8e>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	bb 1f       	adc	r27, r27
    1198:	26 17       	cp	r18, r22
    119a:	37 07       	cpc	r19, r23
    119c:	48 07       	cpc	r20, r24
    119e:	ab 07       	cpc	r26, r27
    11a0:	b0 e8       	ldi	r27, 0x80	; 128
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <__divsf3_pse+0x56>
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	80 2d       	mov	r24, r0
    11a8:	bf 01       	movw	r22, r30
    11aa:	ff 27       	eor	r31, r31
    11ac:	93 58       	subi	r25, 0x83	; 131
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	2a f0       	brmi	.+10     	; 0x11bc <__divsf3_pse+0x6c>
    11b2:	9e 3f       	cpi	r25, 0xFE	; 254
    11b4:	51 05       	cpc	r21, r1
    11b6:	68 f0       	brcs	.+26     	; 0x11d2 <__divsf3_pse+0x82>
    11b8:	b1 c0       	rjmp	.+354    	; 0x131c <__fp_inf>
    11ba:	20 c1       	rjmp	.+576    	; 0x13fc <__fp_szero>
    11bc:	5f 3f       	cpi	r21, 0xFF	; 255
    11be:	ec f3       	brlt	.-6      	; 0x11ba <__divsf3_pse+0x6a>
    11c0:	98 3e       	cpi	r25, 0xE8	; 232
    11c2:	dc f3       	brlt	.-10     	; 0x11ba <__divsf3_pse+0x6a>
    11c4:	86 95       	lsr	r24
    11c6:	77 95       	ror	r23
    11c8:	67 95       	ror	r22
    11ca:	b7 95       	ror	r27
    11cc:	f7 95       	ror	r31
    11ce:	9f 5f       	subi	r25, 0xFF	; 255
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__divsf3_pse+0x74>
    11d2:	88 0f       	add	r24, r24
    11d4:	91 1d       	adc	r25, r1
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret
    11de:	e1 e0       	ldi	r30, 0x01	; 1
    11e0:	66 0f       	add	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	bb 1f       	adc	r27, r27
    11e8:	62 17       	cp	r22, r18
    11ea:	73 07       	cpc	r23, r19
    11ec:	84 07       	cpc	r24, r20
    11ee:	ba 07       	cpc	r27, r26
    11f0:	20 f0       	brcs	.+8      	; 0x11fa <__divsf3_pse+0xaa>
    11f2:	62 1b       	sub	r22, r18
    11f4:	73 0b       	sbc	r23, r19
    11f6:	84 0b       	sbc	r24, r20
    11f8:	ba 0b       	sbc	r27, r26
    11fa:	ee 1f       	adc	r30, r30
    11fc:	88 f7       	brcc	.-30     	; 0x11e0 <__divsf3_pse+0x90>
    11fe:	e0 95       	com	r30
    1200:	08 95       	ret

00001202 <__fixunssfsi>:
    1202:	e1 d0       	rcall	.+450    	; 0x13c6 <__fp_splitA>
    1204:	88 f0       	brcs	.+34     	; 0x1228 <__fixunssfsi+0x26>
    1206:	9f 57       	subi	r25, 0x7F	; 127
    1208:	90 f0       	brcs	.+36     	; 0x122e <__fixunssfsi+0x2c>
    120a:	b9 2f       	mov	r27, r25
    120c:	99 27       	eor	r25, r25
    120e:	b7 51       	subi	r27, 0x17	; 23
    1210:	a0 f0       	brcs	.+40     	; 0x123a <__fixunssfsi+0x38>
    1212:	d1 f0       	breq	.+52     	; 0x1248 <__fixunssfsi+0x46>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	1a f0       	brmi	.+6      	; 0x1224 <__fixunssfsi+0x22>
    121e:	ba 95       	dec	r27
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__fixunssfsi+0x12>
    1222:	12 c0       	rjmp	.+36     	; 0x1248 <__fixunssfsi+0x46>
    1224:	b1 30       	cpi	r27, 0x01	; 1
    1226:	81 f0       	breq	.+32     	; 0x1248 <__fixunssfsi+0x46>
    1228:	e8 d0       	rcall	.+464    	; 0x13fa <__fp_zero>
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	08 95       	ret
    122e:	e5 c0       	rjmp	.+458    	; 0x13fa <__fp_zero>
    1230:	67 2f       	mov	r22, r23
    1232:	78 2f       	mov	r23, r24
    1234:	88 27       	eor	r24, r24
    1236:	b8 5f       	subi	r27, 0xF8	; 248
    1238:	39 f0       	breq	.+14     	; 0x1248 <__fixunssfsi+0x46>
    123a:	b9 3f       	cpi	r27, 0xF9	; 249
    123c:	cc f3       	brlt	.-14     	; 0x1230 <__fixunssfsi+0x2e>
    123e:	86 95       	lsr	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b3 95       	inc	r27
    1246:	d9 f7       	brne	.-10     	; 0x123e <__fixunssfsi+0x3c>
    1248:	3e f4       	brtc	.+14     	; 0x1258 <__fixunssfsi+0x56>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__floatunsisf>:
    125a:	e8 94       	clt
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <__floatsisf+0x12>

0000125e <__floatsisf>:
    125e:	97 fb       	bst	r25, 7
    1260:	3e f4       	brtc	.+14     	; 0x1270 <__floatsisf+0x12>
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	99 23       	and	r25, r25
    1272:	a9 f0       	breq	.+42     	; 0x129e <__floatsisf+0x40>
    1274:	f9 2f       	mov	r31, r25
    1276:	96 e9       	ldi	r25, 0x96	; 150
    1278:	bb 27       	eor	r27, r27
    127a:	93 95       	inc	r25
    127c:	f6 95       	lsr	r31
    127e:	87 95       	ror	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b7 95       	ror	r27
    1286:	f1 11       	cpse	r31, r1
    1288:	f8 cf       	rjmp	.-16     	; 0x127a <__floatsisf+0x1c>
    128a:	fa f4       	brpl	.+62     	; 0x12ca <__floatsisf+0x6c>
    128c:	bb 0f       	add	r27, r27
    128e:	11 f4       	brne	.+4      	; 0x1294 <__floatsisf+0x36>
    1290:	60 ff       	sbrs	r22, 0
    1292:	1b c0       	rjmp	.+54     	; 0x12ca <__floatsisf+0x6c>
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	16 c0       	rjmp	.+44     	; 0x12ca <__floatsisf+0x6c>
    129e:	88 23       	and	r24, r24
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <__floatsisf+0x48>
    12a2:	96 e9       	ldi	r25, 0x96	; 150
    12a4:	11 c0       	rjmp	.+34     	; 0x12c8 <__floatsisf+0x6a>
    12a6:	77 23       	and	r23, r23
    12a8:	21 f0       	breq	.+8      	; 0x12b2 <__floatsisf+0x54>
    12aa:	9e e8       	ldi	r25, 0x8E	; 142
    12ac:	87 2f       	mov	r24, r23
    12ae:	76 2f       	mov	r23, r22
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <__floatsisf+0x5e>
    12b2:	66 23       	and	r22, r22
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <__floatsisf+0x74>
    12b6:	96 e8       	ldi	r25, 0x86	; 134
    12b8:	86 2f       	mov	r24, r22
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	2a f0       	brmi	.+10     	; 0x12ca <__floatsisf+0x6c>
    12c0:	9a 95       	dec	r25
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	da f7       	brpl	.-10     	; 0x12c0 <__floatsisf+0x62>
    12ca:	88 0f       	add	r24, r24
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	97 f9       	bld	r25, 7
    12d2:	08 95       	ret

000012d4 <__fp_cmp>:
    12d4:	99 0f       	add	r25, r25
    12d6:	00 08       	sbc	r0, r0
    12d8:	55 0f       	add	r21, r21
    12da:	aa 0b       	sbc	r26, r26
    12dc:	e0 e8       	ldi	r30, 0x80	; 128
    12de:	fe ef       	ldi	r31, 0xFE	; 254
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	e8 07       	cpc	r30, r24
    12e6:	f9 07       	cpc	r31, r25
    12e8:	c0 f0       	brcs	.+48     	; 0x131a <__fp_cmp+0x46>
    12ea:	12 16       	cp	r1, r18
    12ec:	13 06       	cpc	r1, r19
    12ee:	e4 07       	cpc	r30, r20
    12f0:	f5 07       	cpc	r31, r21
    12f2:	98 f0       	brcs	.+38     	; 0x131a <__fp_cmp+0x46>
    12f4:	62 1b       	sub	r22, r18
    12f6:	73 0b       	sbc	r23, r19
    12f8:	84 0b       	sbc	r24, r20
    12fa:	95 0b       	sbc	r25, r21
    12fc:	39 f4       	brne	.+14     	; 0x130c <__fp_cmp+0x38>
    12fe:	0a 26       	eor	r0, r26
    1300:	61 f0       	breq	.+24     	; 0x131a <__fp_cmp+0x46>
    1302:	23 2b       	or	r18, r19
    1304:	24 2b       	or	r18, r20
    1306:	25 2b       	or	r18, r21
    1308:	21 f4       	brne	.+8      	; 0x1312 <__fp_cmp+0x3e>
    130a:	08 95       	ret
    130c:	0a 26       	eor	r0, r26
    130e:	09 f4       	brne	.+2      	; 0x1312 <__fp_cmp+0x3e>
    1310:	a1 40       	sbci	r26, 0x01	; 1
    1312:	a6 95       	lsr	r26
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	81 1d       	adc	r24, r1
    1318:	81 1d       	adc	r24, r1
    131a:	08 95       	ret

0000131c <__fp_inf>:
    131c:	97 f9       	bld	r25, 7
    131e:	9f 67       	ori	r25, 0x7F	; 127
    1320:	80 e8       	ldi	r24, 0x80	; 128
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	08 95       	ret

00001328 <__fp_nan>:
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	80 ec       	ldi	r24, 0xC0	; 192
    132c:	08 95       	ret

0000132e <__fp_powser>:
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	1f 93       	push	r17
    1334:	0f 93       	push	r16
    1336:	ff 92       	push	r15
    1338:	ef 92       	push	r14
    133a:	df 92       	push	r13
    133c:	7b 01       	movw	r14, r22
    133e:	8c 01       	movw	r16, r24
    1340:	68 94       	set
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__fp_powser+0x20>
    1344:	da 2e       	mov	r13, r26
    1346:	ef 01       	movw	r28, r30
    1348:	76 d0       	rcall	.+236    	; 0x1436 <__mulsf3x>
    134a:	fe 01       	movw	r30, r28
    134c:	e8 94       	clt
    134e:	a5 91       	lpm	r26, Z+
    1350:	25 91       	lpm	r18, Z+
    1352:	35 91       	lpm	r19, Z+
    1354:	45 91       	lpm	r20, Z+
    1356:	55 91       	lpm	r21, Z+
    1358:	ae f3       	brts	.-22     	; 0x1344 <__fp_powser+0x16>
    135a:	ef 01       	movw	r28, r30
    135c:	31 de       	rcall	.-926    	; 0xfc0 <__addsf3x>
    135e:	fe 01       	movw	r30, r28
    1360:	97 01       	movw	r18, r14
    1362:	a8 01       	movw	r20, r16
    1364:	da 94       	dec	r13
    1366:	79 f7       	brne	.-34     	; 0x1346 <__fp_powser+0x18>
    1368:	df 90       	pop	r13
    136a:	ef 90       	pop	r14
    136c:	ff 90       	pop	r15
    136e:	0f 91       	pop	r16
    1370:	1f 91       	pop	r17
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <__fp_pscA>:
    1378:	00 24       	eor	r0, r0
    137a:	0a 94       	dec	r0
    137c:	16 16       	cp	r1, r22
    137e:	17 06       	cpc	r1, r23
    1380:	18 06       	cpc	r1, r24
    1382:	09 06       	cpc	r0, r25
    1384:	08 95       	ret

00001386 <__fp_pscB>:
    1386:	00 24       	eor	r0, r0
    1388:	0a 94       	dec	r0
    138a:	12 16       	cp	r1, r18
    138c:	13 06       	cpc	r1, r19
    138e:	14 06       	cpc	r1, r20
    1390:	05 06       	cpc	r0, r21
    1392:	08 95       	ret

00001394 <__fp_round>:
    1394:	09 2e       	mov	r0, r25
    1396:	03 94       	inc	r0
    1398:	00 0c       	add	r0, r0
    139a:	11 f4       	brne	.+4      	; 0x13a0 <__fp_round+0xc>
    139c:	88 23       	and	r24, r24
    139e:	52 f0       	brmi	.+20     	; 0x13b4 <__fp_round+0x20>
    13a0:	bb 0f       	add	r27, r27
    13a2:	40 f4       	brcc	.+16     	; 0x13b4 <__fp_round+0x20>
    13a4:	bf 2b       	or	r27, r31
    13a6:	11 f4       	brne	.+4      	; 0x13ac <__fp_round+0x18>
    13a8:	60 ff       	sbrs	r22, 0
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <__fp_round+0x20>
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <__fp_split3>:
    13b6:	57 fd       	sbrc	r21, 7
    13b8:	90 58       	subi	r25, 0x80	; 128
    13ba:	44 0f       	add	r20, r20
    13bc:	55 1f       	adc	r21, r21
    13be:	59 f0       	breq	.+22     	; 0x13d6 <__fp_splitA+0x10>
    13c0:	5f 3f       	cpi	r21, 0xFF	; 255
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <__fp_splitA+0x1a>
    13c4:	47 95       	ror	r20

000013c6 <__fp_splitA>:
    13c6:	88 0f       	add	r24, r24
    13c8:	97 fb       	bst	r25, 7
    13ca:	99 1f       	adc	r25, r25
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <__fp_splitA+0x20>
    13ce:	9f 3f       	cpi	r25, 0xFF	; 255
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <__fp_splitA+0x2a>
    13d2:	87 95       	ror	r24
    13d4:	08 95       	ret
    13d6:	12 16       	cp	r1, r18
    13d8:	13 06       	cpc	r1, r19
    13da:	14 06       	cpc	r1, r20
    13dc:	55 1f       	adc	r21, r21
    13de:	f2 cf       	rjmp	.-28     	; 0x13c4 <__fp_split3+0xe>
    13e0:	46 95       	lsr	r20
    13e2:	f1 df       	rcall	.-30     	; 0x13c6 <__fp_splitA>
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <__fp_splitA+0x30>
    13e6:	16 16       	cp	r1, r22
    13e8:	17 06       	cpc	r1, r23
    13ea:	18 06       	cpc	r1, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	f1 cf       	rjmp	.-30     	; 0x13d2 <__fp_splitA+0xc>
    13f0:	86 95       	lsr	r24
    13f2:	71 05       	cpc	r23, r1
    13f4:	61 05       	cpc	r22, r1
    13f6:	08 94       	sec
    13f8:	08 95       	ret

000013fa <__fp_zero>:
    13fa:	e8 94       	clt

000013fc <__fp_szero>:
    13fc:	bb 27       	eor	r27, r27
    13fe:	66 27       	eor	r22, r22
    1400:	77 27       	eor	r23, r23
    1402:	cb 01       	movw	r24, r22
    1404:	97 f9       	bld	r25, 7
    1406:	08 95       	ret

00001408 <__gesf2>:
    1408:	65 df       	rcall	.-310    	; 0x12d4 <__fp_cmp>
    140a:	08 f4       	brcc	.+2      	; 0x140e <__gesf2+0x6>
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	08 95       	ret

00001410 <inverse>:
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	80 e8       	ldi	r24, 0x80	; 128
    141a:	9f e3       	ldi	r25, 0x3F	; 63
    141c:	8a ce       	rjmp	.-748    	; 0x1132 <__divsf3>

0000141e <__mulsf3>:
    141e:	0b d0       	rcall	.+22     	; 0x1436 <__mulsf3x>
    1420:	b9 cf       	rjmp	.-142    	; 0x1394 <__fp_round>
    1422:	aa df       	rcall	.-172    	; 0x1378 <__fp_pscA>
    1424:	28 f0       	brcs	.+10     	; 0x1430 <__mulsf3+0x12>
    1426:	af df       	rcall	.-162    	; 0x1386 <__fp_pscB>
    1428:	18 f0       	brcs	.+6      	; 0x1430 <__mulsf3+0x12>
    142a:	95 23       	and	r25, r21
    142c:	09 f0       	breq	.+2      	; 0x1430 <__mulsf3+0x12>
    142e:	76 cf       	rjmp	.-276    	; 0x131c <__fp_inf>
    1430:	7b cf       	rjmp	.-266    	; 0x1328 <__fp_nan>
    1432:	11 24       	eor	r1, r1
    1434:	e3 cf       	rjmp	.-58     	; 0x13fc <__fp_szero>

00001436 <__mulsf3x>:
    1436:	bf df       	rcall	.-130    	; 0x13b6 <__fp_split3>
    1438:	a0 f3       	brcs	.-24     	; 0x1422 <__mulsf3+0x4>

0000143a <__mulsf3_pse>:
    143a:	95 9f       	mul	r25, r21
    143c:	d1 f3       	breq	.-12     	; 0x1432 <__mulsf3+0x14>
    143e:	95 0f       	add	r25, r21
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	55 1f       	adc	r21, r21
    1444:	62 9f       	mul	r22, r18
    1446:	f0 01       	movw	r30, r0
    1448:	72 9f       	mul	r23, r18
    144a:	bb 27       	eor	r27, r27
    144c:	f0 0d       	add	r31, r0
    144e:	b1 1d       	adc	r27, r1
    1450:	63 9f       	mul	r22, r19
    1452:	aa 27       	eor	r26, r26
    1454:	f0 0d       	add	r31, r0
    1456:	b1 1d       	adc	r27, r1
    1458:	aa 1f       	adc	r26, r26
    145a:	64 9f       	mul	r22, r20
    145c:	66 27       	eor	r22, r22
    145e:	b0 0d       	add	r27, r0
    1460:	a1 1d       	adc	r26, r1
    1462:	66 1f       	adc	r22, r22
    1464:	82 9f       	mul	r24, r18
    1466:	22 27       	eor	r18, r18
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	62 1f       	adc	r22, r18
    146e:	73 9f       	mul	r23, r19
    1470:	b0 0d       	add	r27, r0
    1472:	a1 1d       	adc	r26, r1
    1474:	62 1f       	adc	r22, r18
    1476:	83 9f       	mul	r24, r19
    1478:	a0 0d       	add	r26, r0
    147a:	61 1d       	adc	r22, r1
    147c:	22 1f       	adc	r18, r18
    147e:	74 9f       	mul	r23, r20
    1480:	33 27       	eor	r19, r19
    1482:	a0 0d       	add	r26, r0
    1484:	61 1d       	adc	r22, r1
    1486:	23 1f       	adc	r18, r19
    1488:	84 9f       	mul	r24, r20
    148a:	60 0d       	add	r22, r0
    148c:	21 1d       	adc	r18, r1
    148e:	82 2f       	mov	r24, r18
    1490:	76 2f       	mov	r23, r22
    1492:	6a 2f       	mov	r22, r26
    1494:	11 24       	eor	r1, r1
    1496:	9f 57       	subi	r25, 0x7F	; 127
    1498:	50 40       	sbci	r21, 0x00	; 0
    149a:	8a f0       	brmi	.+34     	; 0x14be <__mulsf3_pse+0x84>
    149c:	e1 f0       	breq	.+56     	; 0x14d6 <__mulsf3_pse+0x9c>
    149e:	88 23       	and	r24, r24
    14a0:	4a f0       	brmi	.+18     	; 0x14b4 <__mulsf3_pse+0x7a>
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	bb 1f       	adc	r27, r27
    14a8:	66 1f       	adc	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	91 50       	subi	r25, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__mulsf3_pse+0x64>
    14b4:	9e 3f       	cpi	r25, 0xFE	; 254
    14b6:	51 05       	cpc	r21, r1
    14b8:	70 f0       	brcs	.+28     	; 0x14d6 <__mulsf3_pse+0x9c>
    14ba:	30 cf       	rjmp	.-416    	; 0x131c <__fp_inf>
    14bc:	9f cf       	rjmp	.-194    	; 0x13fc <__fp_szero>
    14be:	5f 3f       	cpi	r21, 0xFF	; 255
    14c0:	ec f3       	brlt	.-6      	; 0x14bc <__mulsf3_pse+0x82>
    14c2:	98 3e       	cpi	r25, 0xE8	; 232
    14c4:	dc f3       	brlt	.-10     	; 0x14bc <__mulsf3_pse+0x82>
    14c6:	86 95       	lsr	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	b7 95       	ror	r27
    14ce:	f7 95       	ror	r31
    14d0:	e7 95       	ror	r30
    14d2:	9f 5f       	subi	r25, 0xFF	; 255
    14d4:	c1 f7       	brne	.-16     	; 0x14c6 <__mulsf3_pse+0x8c>
    14d6:	fe 2b       	or	r31, r30
    14d8:	88 0f       	add	r24, r24
    14da:	91 1d       	adc	r25, r1
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	97 f9       	bld	r25, 7
    14e2:	08 95       	ret
    14e4:	11 f4       	brne	.+4      	; 0x14ea <__mulsf3_pse+0xb0>
    14e6:	0e f4       	brtc	.+2      	; 0x14ea <__mulsf3_pse+0xb0>
    14e8:	1f cf       	rjmp	.-450    	; 0x1328 <__fp_nan>
    14ea:	41 c0       	rjmp	.+130    	; 0x156e <__fp_mpack>

000014ec <sqrt>:
    14ec:	6c df       	rcall	.-296    	; 0x13c6 <__fp_splitA>
    14ee:	d0 f3       	brcs	.-12     	; 0x14e4 <__mulsf3_pse+0xaa>
    14f0:	99 23       	and	r25, r25
    14f2:	d9 f3       	breq	.-10     	; 0x14ea <__mulsf3_pse+0xb0>
    14f4:	ce f3       	brts	.-14     	; 0x14e8 <__mulsf3_pse+0xae>
    14f6:	9f 57       	subi	r25, 0x7F	; 127
    14f8:	55 0b       	sbc	r21, r21
    14fa:	87 ff       	sbrs	r24, 7
    14fc:	46 d0       	rcall	.+140    	; 0x158a <__fp_norm2>
    14fe:	00 24       	eor	r0, r0
    1500:	a0 e6       	ldi	r26, 0x60	; 96
    1502:	40 ea       	ldi	r20, 0xA0	; 160
    1504:	90 01       	movw	r18, r0
    1506:	80 58       	subi	r24, 0x80	; 128
    1508:	56 95       	lsr	r21
    150a:	97 95       	ror	r25
    150c:	28 f4       	brcc	.+10     	; 0x1518 <sqrt+0x2c>
    150e:	80 5c       	subi	r24, 0xC0	; 192
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	20 f0       	brcs	.+8      	; 0x1520 <sqrt+0x34>
    1518:	26 17       	cp	r18, r22
    151a:	37 07       	cpc	r19, r23
    151c:	48 07       	cpc	r20, r24
    151e:	30 f4       	brcc	.+12     	; 0x152c <sqrt+0x40>
    1520:	62 1b       	sub	r22, r18
    1522:	73 0b       	sbc	r23, r19
    1524:	84 0b       	sbc	r24, r20
    1526:	20 29       	or	r18, r0
    1528:	31 29       	or	r19, r1
    152a:	4a 2b       	or	r20, r26
    152c:	a6 95       	lsr	r26
    152e:	17 94       	ror	r1
    1530:	07 94       	ror	r0
    1532:	20 25       	eor	r18, r0
    1534:	31 25       	eor	r19, r1
    1536:	4a 27       	eor	r20, r26
    1538:	58 f7       	brcc	.-42     	; 0x1510 <sqrt+0x24>
    153a:	66 0f       	add	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	88 1f       	adc	r24, r24
    1540:	20 f0       	brcs	.+8      	; 0x154a <sqrt+0x5e>
    1542:	26 17       	cp	r18, r22
    1544:	37 07       	cpc	r19, r23
    1546:	48 07       	cpc	r20, r24
    1548:	30 f4       	brcc	.+12     	; 0x1556 <sqrt+0x6a>
    154a:	62 0b       	sbc	r22, r18
    154c:	73 0b       	sbc	r23, r19
    154e:	84 0b       	sbc	r24, r20
    1550:	20 0d       	add	r18, r0
    1552:	31 1d       	adc	r19, r1
    1554:	41 1d       	adc	r20, r1
    1556:	a0 95       	com	r26
    1558:	81 f7       	brne	.-32     	; 0x153a <sqrt+0x4e>
    155a:	b9 01       	movw	r22, r18
    155c:	84 2f       	mov	r24, r20
    155e:	91 58       	subi	r25, 0x81	; 129
    1560:	88 0f       	add	r24, r24
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	08 95       	ret

00001568 <square>:
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	58 cf       	rjmp	.-336    	; 0x141e <__mulsf3>

0000156e <__fp_mpack>:
    156e:	9f 3f       	cpi	r25, 0xFF	; 255
    1570:	31 f0       	breq	.+12     	; 0x157e <__fp_mpack_finite+0xc>

00001572 <__fp_mpack_finite>:
    1572:	91 50       	subi	r25, 0x01	; 1
    1574:	20 f4       	brcc	.+8      	; 0x157e <__fp_mpack_finite+0xc>
    1576:	87 95       	ror	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	88 0f       	add	r24, r24
    1580:	91 1d       	adc	r25, r1
    1582:	96 95       	lsr	r25
    1584:	87 95       	ror	r24
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret

0000158a <__fp_norm2>:
    158a:	91 50       	subi	r25, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	d2 f7       	brpl	.-12     	; 0x158a <__fp_norm2>
    1596:	08 95       	ret

00001598 <__tablejump_elpm__>:
    1598:	07 90       	elpm	r0, Z+
    159a:	f6 91       	elpm	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	19 94       	eijmp

000015a0 <_exit>:
    15a0:	f8 94       	cli

000015a2 <__stop_program>:
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <__stop_program>
